
CBNU_Opensource_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000212c  08004fa0  08004fa0  00014fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080070d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000057c  20000080  08007154  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005fc  08007154  000205fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001137d  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026cf  00000000  00000000  00031426  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010b8  00000000  00000000  00033af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fc8  00000000  00000000  00034bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008986  00000000  00000000  00035b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004b40  00000000  00000000  0003e4fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004303e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004a58  00000000  00000000  000430bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f88 	.word	0x08004f88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08004f88 	.word	0x08004f88

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2uiz>:
 80008e4:	004a      	lsls	r2, r1, #1
 80008e6:	d211      	bcs.n	800090c <__aeabi_d2uiz+0x28>
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d211      	bcs.n	8000912 <__aeabi_d2uiz+0x2e>
 80008ee:	d50d      	bpl.n	800090c <__aeabi_d2uiz+0x28>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d40e      	bmi.n	8000918 <__aeabi_d2uiz+0x34>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	4770      	bx	lr
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	4770      	bx	lr
 8000912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000916:	d102      	bne.n	800091e <__aeabi_d2uiz+0x3a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	4770      	bx	lr
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	4770      	bx	lr

08000924 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000938:	4a24      	ldr	r2, [pc, #144]	; (80009cc <MX_GPIO_Init+0xa8>)
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_GPIO_Init+0xa8>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_GPIO_Init+0xa8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0320 	and.w	r3, r3, #32
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <MX_GPIO_Init+0xa8>)
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_GPIO_Init+0xa8>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_GPIO_Init+0xa8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_GPIO_Init+0xa8>)
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_GPIO_Init+0xa8>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f043 0308 	orr.w	r3, r3, #8
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_GPIO_Init+0xa8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_12, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f241 0104 	movw	r1, #4100	; 0x1004
 8000986:	4812      	ldr	r0, [pc, #72]	; (80009d0 <MX_GPIO_Init+0xac>)
 8000988:	f001 fa6f 	bl	8001e6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800098c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2302      	movs	r3, #2
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <MX_GPIO_Init+0xac>)
 80009a6:	f001 f8ef 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0xac>)
 80009c0:	f001 f8e2 	bl	8001b88 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010800 	.word	0x40010800

080009d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <MX_I2C1_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_I2C1_Init+0x58>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_I2C1_Init+0x50>)
 8000a12:	f001 fa43 	bl	8001e9c <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 f994 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200004b8 	.word	0x200004b8
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	00061a80 	.word	0x00061a80

08000a30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <HAL_I2C_MspInit+0x70>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d123      	bne.n	8000a98 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a68:	23c0      	movs	r3, #192	; 0xc0
 8000a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <HAL_I2C_MspInit+0x78>)
 8000a7c:	f001 f884 	bl	8001b88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8a:	61d3      	str	r3, [r2, #28]
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010c00 	.word	0x40010c00
 8000aac:	00000000 	.word	0x00000000

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f000 fe21 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f8f7 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f7ff ff31 	bl	8000924 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ac2:	f7ff ff87 	bl	80009d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ac6:	f000 fd9b 	bl	8001600 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000aca:	f000 fcc5 	bl	8001458 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ace:	f000 fc73 	bl	80013b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000ad2:	4869      	ldr	r0, [pc, #420]	; (8000c78 <main+0x1c8>)
 8000ad4:	f002 fbba 	bl	800324c <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ade:	4867      	ldr	r0, [pc, #412]	; (8000c7c <main+0x1cc>)
 8000ae0:	f001 f9c3 	bl	8001e6a <HAL_GPIO_WritePin>
    SSD1306_Init();
 8000ae4:	f000 f934 	bl	8000d50 <SSD1306_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // buzzer pin
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4865      	ldr	r0, [pc, #404]	; (8000c80 <main+0x1d0>)
 8000aec:	f002 fc50 	bl	8003390 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN PV */
  uint8_t rxData;
  /* USER CODE END PV */

   /* USER CODE BEGIN 2 */
   HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 8000af0:	f107 0312 	add.w	r3, r7, #18
 8000af4:	2201      	movs	r2, #1
 8000af6:	4619      	mov	r1, r3
 8000af8:	4862      	ldr	r0, [pc, #392]	; (8000c84 <main+0x1d4>)
 8000afa:	f003 f9b0 	bl	8003e5e <HAL_UART_Receive_IT>
   uint8_t str[] = "Distance: %d\n\r",Distance;
 8000afe:	4b62      	ldr	r3, [pc, #392]	; (8000c88 <main+0x1d8>)
 8000b00:	463c      	mov	r4, r7
 8000b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b04:	c407      	stmia	r4!, {r0, r1, r2}
 8000b06:	8023      	strh	r3, [r4, #0]
 8000b08:	3402      	adds	r4, #2
 8000b0a:	0c1b      	lsrs	r3, r3, #16
 8000b0c:	7023      	strb	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b14:	4859      	ldr	r0, [pc, #356]	; (8000c7c <main+0x1cc>)
 8000b16:	f001 f9a8 	bl	8001e6a <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b1a:	4b57      	ldr	r3, [pc, #348]	; (8000c78 <main+0x1c8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
	   while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000b22:	bf00      	nop
 8000b24:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <main+0x1c8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	2b09      	cmp	r3, #9
 8000b2c:	d9fa      	bls.n	8000b24 <main+0x74>
	   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	4851      	ldr	r0, [pc, #324]	; (8000c7c <main+0x1cc>)
 8000b36:	f001 f998 	bl	8001e6a <HAL_GPIO_WritePin>

	   pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000b3a:	f000 fe37 	bl	80017ac <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	4b52      	ldr	r3, [pc, #328]	; (8000c8c <main+0x1dc>)
 8000b42:	601a      	str	r2, [r3, #0]
	   // wait for the echo pin to go high
	   while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000b44:	bf00      	nop
 8000b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4a:	484c      	ldr	r0, [pc, #304]	; (8000c7c <main+0x1cc>)
 8000b4c:	f001 f976 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d108      	bne.n	8000b68 <main+0xb8>
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <main+0x1dc>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f103 040a 	add.w	r4, r3, #10
 8000b5e:	f000 fe25 	bl	80017ac <HAL_GetTick>
 8000b62:	4603      	mov	r3, r0
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d8ee      	bhi.n	8000b46 <main+0x96>
	   Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000b68:	4b43      	ldr	r3, [pc, #268]	; (8000c78 <main+0x1c8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	4a48      	ldr	r2, [pc, #288]	; (8000c90 <main+0x1e0>)
 8000b70:	6013      	str	r3, [r2, #0]

	   pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000b72:	f000 fe1b 	bl	80017ac <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <main+0x1dc>)
 8000b7a:	601a      	str	r2, [r3, #0]
	   // wait for the echo pin to go low
	   while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000b7c:	bf00      	nop
 8000b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b82:	483e      	ldr	r0, [pc, #248]	; (8000c7c <main+0x1cc>)
 8000b84:	f001 f95a 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d008      	beq.n	8000ba0 <main+0xf0>
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <main+0x1dc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000b96:	f000 fe09 	bl	80017ac <HAL_GetTick>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	d8ee      	bhi.n	8000b7e <main+0xce>
	   Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <main+0x1c8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <main+0x1e4>)
 8000ba8:	6013      	str	r3, [r2, #0]

	   Distance = (Value2-Value1)* 0.034/2;
 8000baa:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <main+0x1e4>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <main+0x1e0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc0d 	bl	80003d4 <__aeabi_ui2d>
 8000bba:	a32d      	add	r3, pc, #180	; (adr r3, 8000c70 <main+0x1c0>)
 8000bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc0:	f7ff fc7e 	bl	80004c0 <__aeabi_dmul>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	4621      	mov	r1, r4
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd4:	f7ff fd9e 	bl	8000714 <__aeabi_ddiv>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	460c      	mov	r4, r1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	4621      	mov	r1, r4
 8000be0:	f7ff fe80 	bl	80008e4 <__aeabi_d2uiz>
 8000be4:	4603      	mov	r3, r0
 8000be6:	74fb      	strb	r3, [r7, #19]

	   SSD1306_GotoXY (0, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 fa18 	bl	8001020 <SSD1306_GotoXY>
	   SSD1306_Puts ("Distance:", &Font_11x18, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4929      	ldr	r1, [pc, #164]	; (8000c98 <main+0x1e8>)
 8000bf4:	4829      	ldr	r0, [pc, #164]	; (8000c9c <main+0x1ec>)
 8000bf6:	f000 faa9 	bl	800114c <SSD1306_Puts>
	   sprintf(strCopy,"%d    ", Distance);
 8000bfa:	7cfb      	ldrb	r3, [r7, #19]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4928      	ldr	r1, [pc, #160]	; (8000ca0 <main+0x1f0>)
 8000c00:	4828      	ldr	r0, [pc, #160]	; (8000ca4 <main+0x1f4>)
 8000c02:	f003 fd95 	bl	8004730 <siprintf>
	   SSD1306_GotoXY (0, 30);
 8000c06:	211e      	movs	r1, #30
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 fa09 	bl	8001020 <SSD1306_GotoXY>
	   SSD1306_Puts (strCopy, &Font_16x26, 1);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4925      	ldr	r1, [pc, #148]	; (8000ca8 <main+0x1f8>)
 8000c12:	4824      	ldr	r0, [pc, #144]	; (8000ca4 <main+0x1f4>)
 8000c14:	f000 fa9a 	bl	800114c <SSD1306_Puts>
	   SSD1306_UpdateScreen();
 8000c18:	f000 f95e 	bl	8000ed8 <SSD1306_UpdateScreen>
	   HAL_Delay(50);
 8000c1c:	2032      	movs	r0, #50	; 0x32
 8000c1e:	f000 fdcf 	bl	80017c0 <HAL_Delay>


	   if(Distance<20)
 8000c22:	7cfb      	ldrb	r3, [r7, #19]
 8000c24:	2b13      	cmp	r3, #19
 8000c26:	f63f af72 	bhi.w	8000b0e <main+0x5e>
	    {


	      int x;
	      for(x=1000; x<1100; x=x+1)
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e010      	b.n	8000c54 <main+0x1a4>
	      {
	     		   __HAL_TIM_SET_AUTORELOAD(&htim2, x);
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <main+0x1d0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <main+0x1d0>)
 8000c3e:	60d3      	str	r3, [r2, #12]
	     		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 100);
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <main+0x1d0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2264      	movs	r2, #100	; 0x64
 8000c46:	639a      	str	r2, [r3, #56]	; 0x38
	     		   HAL_Delay(100);
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f000 fdb9 	bl	80017c0 <HAL_Delay>
	      for(x=1000; x<1100; x=x+1)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f240 424b 	movw	r2, #1099	; 0x44b
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	dde9      	ble.n	8000c32 <main+0x182>
	     		   } // 100*100 = 10sec
	     		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <main+0x1d0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2200      	movs	r2, #0
 8000c64:	639a      	str	r2, [r3, #56]	; 0x38
	     		  HAL_Delay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f000 fdaa 	bl	80017c0 <HAL_Delay>
	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000c6c:	e74f      	b.n	8000b0e <main+0x5e>
 8000c6e:	bf00      	nop
 8000c70:	b020c49c 	.word	0xb020c49c
 8000c74:	3fa16872 	.word	0x3fa16872
 8000c78:	20000520 	.word	0x20000520
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	20000568 	.word	0x20000568
 8000c84:	200005b0 	.word	0x200005b0
 8000c88:	08004fb4 	.word	0x08004fb4
 8000c8c:	2000050c 	.word	0x2000050c
 8000c90:	2000009c 	.word	0x2000009c
 8000c94:	200000a0 	.word	0x200000a0
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	08004fa0 	.word	0x08004fa0
 8000ca0:	08004fac 	.word	0x08004fac
 8000ca4:	20000510 	.word	0x20000510
 8000ca8:	20000008 	.word	0x20000008

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	2228      	movs	r2, #40	; 0x28
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fd30 	bl	8004720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fe3d 	bl	8002974 <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d00:	f000 f822 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 f8a8 	bl	8002e74 <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d2a:	f000 f80d 	bl	8000d48 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3740      	adds	r7, #64	; 0x40
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
  {

}
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <Error_Handler+0x6>

08000d50 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000d56:	f000 fa1f 	bl	8001198 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d5a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2178      	movs	r1, #120	; 0x78
 8000d62:	485b      	ldr	r0, [pc, #364]	; (8000ed0 <SSD1306_Init+0x180>)
 8000d64:	f001 fad0 	bl	8002308 <HAL_I2C_IsDeviceReady>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e0a9      	b.n	8000ec6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000d72:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000d76:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d78:	e002      	b.n	8000d80 <SSD1306_Init+0x30>
		p--;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f9      	bne.n	8000d7a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d86:	22ae      	movs	r2, #174	; 0xae
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2078      	movs	r0, #120	; 0x78
 8000d8c:	f000 fa60 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000d90:	2220      	movs	r2, #32
 8000d92:	2100      	movs	r1, #0
 8000d94:	2078      	movs	r0, #120	; 0x78
 8000d96:	f000 fa5b 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2078      	movs	r0, #120	; 0x78
 8000da0:	f000 fa56 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000da4:	22b0      	movs	r2, #176	; 0xb0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2078      	movs	r0, #120	; 0x78
 8000daa:	f000 fa51 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000dae:	22c8      	movs	r2, #200	; 0xc8
 8000db0:	2100      	movs	r1, #0
 8000db2:	2078      	movs	r0, #120	; 0x78
 8000db4:	f000 fa4c 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2078      	movs	r0, #120	; 0x78
 8000dbe:	f000 fa47 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2078      	movs	r0, #120	; 0x78
 8000dc8:	f000 fa42 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2078      	movs	r0, #120	; 0x78
 8000dd2:	f000 fa3d 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000dd6:	2281      	movs	r2, #129	; 0x81
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2078      	movs	r0, #120	; 0x78
 8000ddc:	f000 fa38 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000de0:	22ff      	movs	r2, #255	; 0xff
 8000de2:	2100      	movs	r1, #0
 8000de4:	2078      	movs	r0, #120	; 0x78
 8000de6:	f000 fa33 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000dea:	22a1      	movs	r2, #161	; 0xa1
 8000dec:	2100      	movs	r1, #0
 8000dee:	2078      	movs	r0, #120	; 0x78
 8000df0:	f000 fa2e 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000df4:	22a6      	movs	r2, #166	; 0xa6
 8000df6:	2100      	movs	r1, #0
 8000df8:	2078      	movs	r0, #120	; 0x78
 8000dfa:	f000 fa29 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000dfe:	22a8      	movs	r2, #168	; 0xa8
 8000e00:	2100      	movs	r1, #0
 8000e02:	2078      	movs	r0, #120	; 0x78
 8000e04:	f000 fa24 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000e08:	223f      	movs	r2, #63	; 0x3f
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2078      	movs	r0, #120	; 0x78
 8000e0e:	f000 fa1f 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e12:	22a4      	movs	r2, #164	; 0xa4
 8000e14:	2100      	movs	r1, #0
 8000e16:	2078      	movs	r0, #120	; 0x78
 8000e18:	f000 fa1a 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000e1c:	22d3      	movs	r2, #211	; 0xd3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2078      	movs	r0, #120	; 0x78
 8000e22:	f000 fa15 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2078      	movs	r0, #120	; 0x78
 8000e2c:	f000 fa10 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e30:	22d5      	movs	r2, #213	; 0xd5
 8000e32:	2100      	movs	r1, #0
 8000e34:	2078      	movs	r0, #120	; 0x78
 8000e36:	f000 fa0b 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000e3a:	22f0      	movs	r2, #240	; 0xf0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2078      	movs	r0, #120	; 0x78
 8000e40:	f000 fa06 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000e44:	22d9      	movs	r2, #217	; 0xd9
 8000e46:	2100      	movs	r1, #0
 8000e48:	2078      	movs	r0, #120	; 0x78
 8000e4a:	f000 fa01 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000e4e:	2222      	movs	r2, #34	; 0x22
 8000e50:	2100      	movs	r1, #0
 8000e52:	2078      	movs	r0, #120	; 0x78
 8000e54:	f000 f9fc 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e58:	22da      	movs	r2, #218	; 0xda
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2078      	movs	r0, #120	; 0x78
 8000e5e:	f000 f9f7 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000e62:	2212      	movs	r2, #18
 8000e64:	2100      	movs	r1, #0
 8000e66:	2078      	movs	r0, #120	; 0x78
 8000e68:	f000 f9f2 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e6c:	22db      	movs	r2, #219	; 0xdb
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2078      	movs	r0, #120	; 0x78
 8000e72:	f000 f9ed 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e76:	2220      	movs	r2, #32
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2078      	movs	r0, #120	; 0x78
 8000e7c:	f000 f9e8 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000e80:	228d      	movs	r2, #141	; 0x8d
 8000e82:	2100      	movs	r1, #0
 8000e84:	2078      	movs	r0, #120	; 0x78
 8000e86:	f000 f9e3 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e8a:	2214      	movs	r2, #20
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2078      	movs	r0, #120	; 0x78
 8000e90:	f000 f9de 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e94:	22af      	movs	r2, #175	; 0xaf
 8000e96:	2100      	movs	r1, #0
 8000e98:	2078      	movs	r0, #120	; 0x78
 8000e9a:	f000 f9d9 	bl	8001250 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e9e:	222e      	movs	r2, #46	; 0x2e
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2078      	movs	r0, #120	; 0x78
 8000ea4:	f000 f9d4 	bl	8001250 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 f843 	bl	8000f34 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000eae:	f000 f813 	bl	8000ed8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SSD1306_Init+0x184>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SSD1306_Init+0x184>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SSD1306_Init+0x184>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000ec4:	2301      	movs	r3, #1
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200004b8 	.word	0x200004b8
 8000ed4:	200004a4 	.word	0x200004a4

08000ed8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	e01d      	b.n	8000f20 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	3b50      	subs	r3, #80	; 0x50
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	2078      	movs	r0, #120	; 0x78
 8000ef0:	f000 f9ae 	bl	8001250 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2078      	movs	r0, #120	; 0x78
 8000efa:	f000 f9a9 	bl	8001250 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000efe:	2210      	movs	r2, #16
 8000f00:	2100      	movs	r1, #0
 8000f02:	2078      	movs	r0, #120	; 0x78
 8000f04:	f000 f9a4 	bl	8001250 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <SSD1306_UpdateScreen+0x58>)
 8000f0e:	441a      	add	r2, r3
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	2078      	movs	r0, #120	; 0x78
 8000f16:	f000 f953 	bl	80011c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b07      	cmp	r3, #7
 8000f24:	d9de      	bls.n	8000ee4 <SSD1306_UpdateScreen+0xc>
	}
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000a4 	.word	0x200000a4

08000f34 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <SSD1306_Fill+0x14>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e000      	b.n	8000f4a <SSD1306_Fill+0x16>
 8000f48:	23ff      	movs	r3, #255	; 0xff
 8000f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <SSD1306_Fill+0x2c>)
 8000f52:	f003 fbe5 	bl	8004720 <memset>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000a4 	.word	0x200000a4

08000f64 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	70fb      	strb	r3, [r7, #3]
	if (
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	2b7f      	cmp	r3, #127	; 0x7f
 8000f7a:	d848      	bhi.n	800100e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f80:	d845      	bhi.n	800100e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SSD1306_DrawPixel+0xb4>)
 8000f84:	791b      	ldrb	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf0c      	ite	eq
 8000f90:	2301      	moveq	r3, #1
 8000f92:	2300      	movne	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d11a      	bne.n	8000fd4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	b298      	uxth	r0, r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	01db      	lsls	r3, r3, #7
 8000faa:	4413      	add	r3, r2
 8000fac:	88f9      	ldrh	r1, [r7, #6]
 8000fae:	4602      	mov	r2, r0
 8000fb0:	01d2      	lsls	r2, r2, #7
 8000fb2:	440a      	add	r2, r1
 8000fb4:	4919      	ldr	r1, [pc, #100]	; (800101c <SSD1306_DrawPixel+0xb8>)
 8000fb6:	5c8a      	ldrb	r2, [r1, r2]
 8000fb8:	b251      	sxtb	r1, r2
 8000fba:	88ba      	ldrh	r2, [r7, #4]
 8000fbc:	f002 0207 	and.w	r2, r2, #7
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	b252      	sxtb	r2, r2
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	b252      	sxtb	r2, r2
 8000fcc:	b2d1      	uxtb	r1, r2
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <SSD1306_DrawPixel+0xb8>)
 8000fd0:	54d1      	strb	r1, [r2, r3]
 8000fd2:	e01d      	b.n	8001010 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000fd4:	88fa      	ldrh	r2, [r7, #6]
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	b298      	uxth	r0, r3
 8000fdc:	4603      	mov	r3, r0
 8000fde:	01db      	lsls	r3, r3, #7
 8000fe0:	4413      	add	r3, r2
 8000fe2:	88f9      	ldrh	r1, [r7, #6]
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	01d2      	lsls	r2, r2, #7
 8000fe8:	440a      	add	r2, r1
 8000fea:	490c      	ldr	r1, [pc, #48]	; (800101c <SSD1306_DrawPixel+0xb8>)
 8000fec:	5c8a      	ldrb	r2, [r1, r2]
 8000fee:	b251      	sxtb	r1, r2
 8000ff0:	88ba      	ldrh	r2, [r7, #4]
 8000ff2:	f002 0207 	and.w	r2, r2, #7
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffc:	b252      	sxtb	r2, r2
 8000ffe:	43d2      	mvns	r2, r2
 8001000:	b252      	sxtb	r2, r2
 8001002:	400a      	ands	r2, r1
 8001004:	b252      	sxtb	r2, r2
 8001006:	b2d1      	uxtb	r1, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <SSD1306_DrawPixel+0xb8>)
 800100a:	54d1      	strb	r1, [r2, r3]
 800100c:	e000      	b.n	8001010 <SSD1306_DrawPixel+0xac>
		return;
 800100e:	bf00      	nop
	}
}
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	200004a4 	.word	0x200004a4
 800101c:	200000a4 	.word	0x200000a4

08001020 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	80fb      	strh	r3, [r7, #6]
 800102c:	4613      	mov	r3, r2
 800102e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SSD1306_GotoXY+0x28>)
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <SSD1306_GotoXY+0x28>)
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	8053      	strh	r3, [r2, #2]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200004a4 	.word	0x200004a4

0800104c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <SSD1306_Putc+0xfc>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
	if (
 8001068:	2b7f      	cmp	r3, #127	; 0x7f
 800106a:	dc07      	bgt.n	800107c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <SSD1306_Putc+0xfc>)
 800106e:	885b      	ldrh	r3, [r3, #2]
 8001070:	461a      	mov	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001078:	2b3f      	cmp	r3, #63	; 0x3f
 800107a:	dd01      	ble.n	8001080 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800107c:	2300      	movs	r3, #0
 800107e:	e05e      	b.n	800113e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e04b      	b.n	800111e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	3b20      	subs	r3, #32
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	7849      	ldrb	r1, [r1, #1]
 8001092:	fb01 f303 	mul.w	r3, r1, r3
 8001096:	4619      	mov	r1, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	440b      	add	r3, r1
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	e030      	b.n	800110c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d010      	beq.n	80010dc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <SSD1306_Putc+0xfc>)
 80010bc:	881a      	ldrh	r2, [r3, #0]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	b298      	uxth	r0, r3
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <SSD1306_Putc+0xfc>)
 80010c8:	885a      	ldrh	r2, [r3, #2]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4413      	add	r3, r2
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff ff45 	bl	8000f64 <SSD1306_DrawPixel>
 80010da:	e014      	b.n	8001106 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <SSD1306_Putc+0xfc>)
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	b298      	uxth	r0, r3
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <SSD1306_Putc+0xfc>)
 80010ea:	885a      	ldrh	r2, [r3, #2]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b299      	uxth	r1, r3
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf0c      	ite	eq
 80010fa:	2301      	moveq	r3, #1
 80010fc:	2300      	movne	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	f7ff ff2f 	bl	8000f64 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	3301      	adds	r3, #1
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8c8      	bhi.n	80010aa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	461a      	mov	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	429a      	cmp	r2, r3
 8001128:	d8ad      	bhi.n	8001086 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <SSD1306_Putc+0xfc>)
 800112c:	881a      	ldrh	r2, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <SSD1306_Putc+0xfc>)
 800113a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800113c:	79fb      	ldrb	r3, [r7, #7]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200004a4 	.word	0x200004a4

0800114c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	4613      	mov	r3, r2
 8001158:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800115a:	e012      	b.n	8001182 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	79fa      	ldrb	r2, [r7, #7]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff71 	bl	800104c <SSD1306_Putc>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d002      	beq.n	800117c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	e008      	b.n	800118e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1e8      	bne.n	800115c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	781b      	ldrb	r3, [r3, #0]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <ssd1306_I2C_Init+0x24>)
 80011a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011a2:	e002      	b.n	80011aa <ssd1306_I2C_Init+0x12>
		p--;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f9      	bne.n	80011a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	0003d090 	.word	0x0003d090

080011c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b0c7      	sub	sp, #284	; 0x11c
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4639      	mov	r1, r7
 80011cc:	600a      	str	r2, [r1, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	4622      	mov	r2, r4
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	1dbb      	adds	r3, r7, #6
 80011d8:	4602      	mov	r2, r0
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	460a      	mov	r2, r1
 80011e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	1dba      	adds	r2, r7, #6
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011f2:	e010      	b.n	8001216 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80011f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011f8:	3301      	adds	r3, #1
 80011fa:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80011fe:	4639      	mov	r1, r7
 8001200:	6809      	ldr	r1, [r1, #0]
 8001202:	440a      	add	r2, r1
 8001204:	7811      	ldrb	r1, [r2, #0]
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800120c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001210:	3301      	adds	r3, #1
 8001212:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001216:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800121a:	b29b      	uxth	r3, r3
 800121c:	1d3a      	adds	r2, r7, #4
 800121e:	8812      	ldrh	r2, [r2, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8e7      	bhi.n	80011f4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b299      	uxth	r1, r3
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	b298      	uxth	r0, r3
 8001232:	f107 020c 	add.w	r2, r7, #12
 8001236:	230a      	movs	r3, #10
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4603      	mov	r3, r0
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <ssd1306_I2C_WriteMulti+0x8c>)
 800123e:	f000 ff65 	bl	800210c <HAL_I2C_Master_Transmit>
}
 8001242:	bf00      	nop
 8001244:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	200004b8 	.word	0x200004b8

08001250 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001266:	797b      	ldrb	r3, [r7, #5]
 8001268:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	b299      	uxth	r1, r3
 800126e:	f107 020c 	add.w	r2, r7, #12
 8001272:	230a      	movs	r3, #10
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <ssd1306_I2C_Write+0x38>)
 800127a:	f000 ff47 	bl	800210c <HAL_I2C_Master_Transmit>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200004b8 	.word	0x200004b8

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <HAL_MspInit+0x5c>)
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_MspInit+0x5c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_MspInit+0x5c>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_MspInit+0x5c>)
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_MspInit+0x5c>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_MspInit+0x5c>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_MspInit+0x60>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_MspInit+0x60>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 fa27 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <USART1_IRQHandler+0x10>)
 8001346:	f002 fdbb 	bl	8003ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200005b0 	.word	0x200005b0

08001354 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_sbrk+0x50>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x16>
		heap_end = &end;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <_sbrk+0x50>)
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <_sbrk+0x54>)
 8001368:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <_sbrk+0x50>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <_sbrk+0x50>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	466a      	mov	r2, sp
 800137a:	4293      	cmp	r3, r2
 800137c:	d907      	bls.n	800138e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800137e:	f003 f9a5 	bl	80046cc <__errno>
 8001382:	4602      	mov	r2, r0
 8001384:	230c      	movs	r3, #12
 8001386:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	e006      	b.n	800139c <_sbrk+0x48>
	}

	heap_end += incr;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <_sbrk+0x50>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <_sbrk+0x50>)
 8001398:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200004ac 	.word	0x200004ac
 80013a8:	200005fc 	.word	0x200005fc

080013ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_TIM1_Init+0x98>)
 80013d6:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <MX_TIM1_Init+0x9c>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_TIM1_Init+0x98>)
 80013dc:	2247      	movs	r2, #71	; 0x47
 80013de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_TIM1_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_TIM1_Init+0x98>)
 80013e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_TIM1_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_TIM1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_TIM1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <MX_TIM1_Init+0x98>)
 8001402:	f001 fed3 	bl	80031ac <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800140c:	f7ff fc9c 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_TIM1_Init+0x98>)
 800141e:	f002 f917 	bl	8003650 <HAL_TIM_ConfigClockSource>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001428:	f7ff fc8e 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_TIM1_Init+0x98>)
 800143a:	f002 fc65 	bl	8003d08 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001444:	f7ff fc80 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000520 	.word	0x20000520
 8001454:	40012c00 	.word	0x40012c00

08001458 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_TIM2_Init+0xe4>)
 800148a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <MX_TIM2_Init+0xe4>)
 8001492:	227f      	movs	r2, #127	; 0x7f
 8001494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <MX_TIM2_Init+0xe4>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <MX_TIM2_Init+0xe4>)
 800149e:	2214      	movs	r2, #20
 80014a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <MX_TIM2_Init+0xe4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <MX_TIM2_Init+0xe4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ae:	4823      	ldr	r0, [pc, #140]	; (800153c <MX_TIM2_Init+0xe4>)
 80014b0:	f001 fe7c 	bl	80031ac <HAL_TIM_Base_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80014ba:	f7ff fc45 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c8:	4619      	mov	r1, r3
 80014ca:	481c      	ldr	r0, [pc, #112]	; (800153c <MX_TIM2_Init+0xe4>)
 80014cc:	f002 f8c0 	bl	8003650 <HAL_TIM_ConfigClockSource>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80014d6:	f7ff fc37 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014da:	4818      	ldr	r0, [pc, #96]	; (800153c <MX_TIM2_Init+0xe4>)
 80014dc:	f001 ff00 	bl	80032e0 <HAL_TIM_PWM_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80014e6:	f7ff fc2f 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	4619      	mov	r1, r3
 80014f8:	4810      	ldr	r0, [pc, #64]	; (800153c <MX_TIM2_Init+0xe4>)
 80014fa:	f002 fc05 	bl	8003d08 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001504:	f7ff fc20 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001508:	2360      	movs	r3, #96	; 0x60
 800150a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2204      	movs	r2, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_TIM2_Init+0xe4>)
 8001520:	f001 ffd8 	bl	80034d4 <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800152a:	f7ff fc0d 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM2_Init+0xe4>)
 8001530:	f000 f836 	bl	80015a0 <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3738      	adds	r7, #56	; 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000568 	.word	0x20000568

08001540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <HAL_TIM_Base_MspInit+0x58>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10c      	bne.n	800156c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_TIM_Base_MspInit+0x5c>)
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_TIM_Base_MspInit+0x5c>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_TIM_Base_MspInit+0x5c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800156a:	e010      	b.n	800158e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001574:	d10b      	bne.n	800158e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_TIM_Base_MspInit+0x5c>)
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_TIM_Base_MspInit+0x5c>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_TIM_Base_MspInit+0x5c>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40012c00 	.word	0x40012c00
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015be:	d117      	bne.n	80015f0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_TIM_MspPostInit+0x58>)
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_TIM_MspPostInit+0x58>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_TIM_MspPostInit+0x58>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <HAL_TIM_MspPostInit+0x5c>)
 80015ec:	f000 facc 	bl	8001b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010800 	.word	0x40010800

08001600 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_USART1_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800160c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001638:	f002 fbc4 	bl	8003dc4 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f7ff fb81 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200005b0 	.word	0x200005b0
 8001650:	40013800 	.word	0x40013800

08001654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <HAL_UART_MspInit+0x9c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d139      	bne.n	80016e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001674:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <HAL_UART_MspInit+0xa0>)
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_UART_MspInit+0xa0>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_UART_MspInit+0xa0>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_UART_MspInit+0xa0>)
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_UART_MspInit+0xa0>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_UART_MspInit+0xa0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <HAL_UART_MspInit+0xa4>)
 80016ba:	f000 fa65 	bl	8001b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <HAL_UART_MspInit+0xa4>)
 80016d4:	f000 fa58 	bl	8001b88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2025      	movs	r0, #37	; 0x25
 80016de:	f000 f966 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016e2:	2025      	movs	r0, #37	; 0x25
 80016e4:	f000 f97f 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40013800 	.word	0x40013800
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_Init+0x28>)
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x28>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f943 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fdb8 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f95b 	bl	8001a02 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f923 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000010 	.word	0x20000010
 8001780:	20000018 	.word	0x20000018
 8001784:	20000014 	.word	0x20000014

08001788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x1c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_IncTick+0x20>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <HAL_IncTick+0x20>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000018 	.word	0x20000018
 80017a8:	200005f4 	.word	0x200005f4

080017ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_GetTick+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	200005f4 	.word	0x200005f4

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff fff0 	bl	80017ac <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_Delay+0x40>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffe0 	bl	80017ac <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad2      	subs	r2, r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d3f7      	bcc.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000018 	.word	0x20000018

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_EnableIRQ+0x34>)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	f002 021f 	and.w	r2, r2, #31
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	490d      	ldr	r1, [pc, #52]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	4909      	ldr	r1, [pc, #36]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	2201      	movs	r2, #1
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	1e5a      	subs	r2, r3, #1
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	401a      	ands	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193a:	2101      	movs	r1, #1
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	1e59      	subs	r1, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff92 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff2f 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff44 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff92 	bl	80018f4 <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff61 	bl	80018a0 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff37 	bl	8001868 <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa2 	bl	8001954 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d008      	beq.n	8001a42 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2204      	movs	r2, #4
 8001a34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e020      	b.n	8001a84 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	f022 020e 	bic.w	r2, r2, #14
 8001a50:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d005      	beq.n	8001ab2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e057      	b.n	8001b62 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f022 020e 	bic.w	r2, r2, #14
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ad2:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <HAL_DMA_Abort_IT+0xdc>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_DMA_Abort_IT+0xe0>)
 8001adc:	4299      	cmp	r1, r3
 8001ade:	d02e      	beq.n	8001b3e <HAL_DMA_Abort_IT+0xae>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_DMA_Abort_IT+0xe4>)
 8001ae8:	4299      	cmp	r1, r3
 8001aea:	d026      	beq.n	8001b3a <HAL_DMA_Abort_IT+0xaa>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_DMA_Abort_IT+0xe8>)
 8001af4:	4299      	cmp	r1, r3
 8001af6:	d01d      	beq.n	8001b34 <HAL_DMA_Abort_IT+0xa4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <HAL_DMA_Abort_IT+0xec>)
 8001b00:	4299      	cmp	r1, r3
 8001b02:	d014      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x9e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_DMA_Abort_IT+0xf0>)
 8001b0c:	4299      	cmp	r1, r3
 8001b0e:	d00b      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x98>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_DMA_Abort_IT+0xf4>)
 8001b18:	4299      	cmp	r1, r3
 8001b1a:	d102      	bne.n	8001b22 <HAL_DMA_Abort_IT+0x92>
 8001b1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b20:	e00e      	b.n	8001b40 <HAL_DMA_Abort_IT+0xb0>
 8001b22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b26:	e00b      	b.n	8001b40 <HAL_DMA_Abort_IT+0xb0>
 8001b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2c:	e008      	b.n	8001b40 <HAL_DMA_Abort_IT+0xb0>
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	e005      	b.n	8001b40 <HAL_DMA_Abort_IT+0xb0>
 8001b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b38:	e002      	b.n	8001b40 <HAL_DMA_Abort_IT+0xb0>
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	e000      	b.n	8001b40 <HAL_DMA_Abort_IT+0xb0>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
    } 
  }
  return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020008 	.word	0x40020008
 8001b74:	4002001c 	.word	0x4002001c
 8001b78:	40020030 	.word	0x40020030
 8001b7c:	40020044 	.word	0x40020044
 8001b80:	40020058 	.word	0x40020058
 8001b84:	4002006c 	.word	0x4002006c

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b08b      	sub	sp, #44	; 0x2c
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9a:	e127      	b.n	8001dec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f040 8116 	bne.w	8001de6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b12      	cmp	r3, #18
 8001bc0:	d034      	beq.n	8001c2c <HAL_GPIO_Init+0xa4>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d80d      	bhi.n	8001be2 <HAL_GPIO_Init+0x5a>
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d02b      	beq.n	8001c22 <HAL_GPIO_Init+0x9a>
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d804      	bhi.n	8001bd8 <HAL_GPIO_Init+0x50>
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d031      	beq.n	8001c36 <HAL_GPIO_Init+0xae>
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d01c      	beq.n	8001c10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd6:	e048      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d043      	beq.n	8001c64 <HAL_GPIO_Init+0xdc>
 8001bdc:	2b11      	cmp	r3, #17
 8001bde:	d01b      	beq.n	8001c18 <HAL_GPIO_Init+0x90>
          break;
 8001be0:	e043      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001be2:	4a89      	ldr	r2, [pc, #548]	; (8001e08 <HAL_GPIO_Init+0x280>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d026      	beq.n	8001c36 <HAL_GPIO_Init+0xae>
 8001be8:	4a87      	ldr	r2, [pc, #540]	; (8001e08 <HAL_GPIO_Init+0x280>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d806      	bhi.n	8001bfc <HAL_GPIO_Init+0x74>
 8001bee:	4a87      	ldr	r2, [pc, #540]	; (8001e0c <HAL_GPIO_Init+0x284>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d020      	beq.n	8001c36 <HAL_GPIO_Init+0xae>
 8001bf4:	4a86      	ldr	r2, [pc, #536]	; (8001e10 <HAL_GPIO_Init+0x288>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01d      	beq.n	8001c36 <HAL_GPIO_Init+0xae>
          break;
 8001bfa:	e036      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bfc:	4a85      	ldr	r2, [pc, #532]	; (8001e14 <HAL_GPIO_Init+0x28c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0xae>
 8001c02:	4a85      	ldr	r2, [pc, #532]	; (8001e18 <HAL_GPIO_Init+0x290>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d016      	beq.n	8001c36 <HAL_GPIO_Init+0xae>
 8001c08:	4a84      	ldr	r2, [pc, #528]	; (8001e1c <HAL_GPIO_Init+0x294>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0xae>
          break;
 8001c0e:	e02c      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	623b      	str	r3, [r7, #32]
          break;
 8001c16:	e028      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	623b      	str	r3, [r7, #32]
          break;
 8001c20:	e023      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	3308      	adds	r3, #8
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e01e      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	330c      	adds	r3, #12
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e019      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e012      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	611a      	str	r2, [r3, #16]
          break;
 8001c56:	e008      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	615a      	str	r2, [r3, #20]
          break;
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2bff      	cmp	r3, #255	; 0xff
 8001c6e:	d801      	bhi.n	8001c74 <HAL_GPIO_Init+0xec>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	e001      	b.n	8001c78 <HAL_GPIO_Init+0xf0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2bff      	cmp	r3, #255	; 0xff
 8001c7e:	d802      	bhi.n	8001c86 <HAL_GPIO_Init+0xfe>
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x104>
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	3b08      	subs	r3, #8
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	210f      	movs	r1, #15
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	6a39      	ldr	r1, [r7, #32]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 8096 	beq.w	8001de6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cba:	4a59      	ldr	r2, [pc, #356]	; (8001e20 <HAL_GPIO_Init+0x298>)
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_GPIO_Init+0x298>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6193      	str	r3, [r2, #24]
 8001cc6:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <HAL_GPIO_Init+0x298>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd2:	4a54      	ldr	r2, [pc, #336]	; (8001e24 <HAL_GPIO_Init+0x29c>)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cde:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_GPIO_Init+0x2a0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x19e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4a      	ldr	r2, [pc, #296]	; (8001e2c <HAL_GPIO_Init+0x2a4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x19a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a49      	ldr	r2, [pc, #292]	; (8001e30 <HAL_GPIO_Init+0x2a8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x196>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_GPIO_Init+0x2ac>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x192>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x1a0>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x1a0>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x1a0>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x1a0>
 8001d26:	2300      	movs	r3, #0
 8001d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d38:	493a      	ldr	r1, [pc, #232]	; (8001e24 <HAL_GPIO_Init+0x29c>)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d52:	4939      	ldr	r1, [pc, #228]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d54:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
 8001d5e:	e006      	b.n	8001d6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d60:	4935      	ldr	r1, [pc, #212]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d62:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d7a:	492f      	ldr	r1, [pc, #188]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
 8001d86:	e006      	b.n	8001d96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d88:	492b      	ldr	r1, [pc, #172]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4013      	ands	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da2:	4925      	ldr	r1, [pc, #148]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
 8001dae:	e006      	b.n	8001dbe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001db0:	4921      	ldr	r1, [pc, #132]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4013      	ands	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dca:	491b      	ldr	r1, [pc, #108]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60cb      	str	r3, [r1, #12]
 8001dd6:	e006      	b.n	8001de6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd8:	4917      	ldr	r1, [pc, #92]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4013      	ands	r3, r2
 8001de4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	3301      	adds	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f47f aed0 	bne.w	8001b9c <HAL_GPIO_Init+0x14>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	372c      	adds	r7, #44	; 0x2c
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	10210000 	.word	0x10210000
 8001e0c:	10110000 	.word	0x10110000
 8001e10:	10120000 	.word	0x10120000
 8001e14:	10310000 	.word	0x10310000
 8001e18:	10320000 	.word	0x10320000
 8001e1c:	10220000 	.word	0x10220000
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40010800 	.word	0x40010800
 8001e2c:	40010c00 	.word	0x40010c00
 8001e30:	40011000 	.word	0x40011000
 8001e34:	40011400 	.word	0x40011400
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e001      	b.n	8001e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	807b      	strh	r3, [r7, #2]
 8001e76:	4613      	mov	r3, r2
 8001e78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7a:	787b      	ldrb	r3, [r7, #1]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e80:	887a      	ldrh	r2, [r7, #2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e86:	e003      	b.n	8001e90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e11f      	b.n	80020ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fdb4 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2224      	movs	r2, #36	; 0x24
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f00:	f001 f90e 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a7b      	ldr	r2, [pc, #492]	; (80020f8 <HAL_I2C_Init+0x25c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d807      	bhi.n	8001f20 <HAL_I2C_Init+0x84>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a7a      	ldr	r2, [pc, #488]	; (80020fc <HAL_I2C_Init+0x260>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	bf94      	ite	ls
 8001f18:	2301      	movls	r3, #1
 8001f1a:	2300      	movhi	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e006      	b.n	8001f2e <HAL_I2C_Init+0x92>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a77      	ldr	r2, [pc, #476]	; (8002100 <HAL_I2C_Init+0x264>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bf94      	ite	ls
 8001f28:	2301      	movls	r3, #1
 8001f2a:	2300      	movhi	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0db      	b.n	80020ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4a72      	ldr	r2, [pc, #456]	; (8002104 <HAL_I2C_Init+0x268>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	6852      	ldr	r2, [r2, #4]
 8001f4c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4863      	ldr	r0, [pc, #396]	; (80020f8 <HAL_I2C_Init+0x25c>)
 8001f6a:	4283      	cmp	r3, r0
 8001f6c:	d802      	bhi.n	8001f74 <HAL_I2C_Init+0xd8>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3301      	adds	r3, #1
 8001f72:	e009      	b.n	8001f88 <HAL_I2C_Init+0xec>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f7a:	fb00 f303 	mul.w	r3, r0, r3
 8001f7e:	4862      	ldr	r0, [pc, #392]	; (8002108 <HAL_I2C_Init+0x26c>)
 8001f80:	fba0 0303 	umull	r0, r3, r0, r3
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	3301      	adds	r3, #1
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4955      	ldr	r1, [pc, #340]	; (80020f8 <HAL_I2C_Init+0x25c>)
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d80d      	bhi.n	8001fc4 <HAL_I2C_Init+0x128>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e59      	subs	r1, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	bf38      	it	cc
 8001fc0:	2304      	movcc	r3, #4
 8001fc2:	e04f      	b.n	8002064 <HAL_I2C_Init+0x1c8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d111      	bne.n	8001ff0 <HAL_I2C_Init+0x154>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e5c      	subs	r4, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	440b      	add	r3, r1
 8001fda:	fbb4 f3f3 	udiv	r3, r4, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	e012      	b.n	8002016 <HAL_I2C_Init+0x17a>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1e5c      	subs	r4, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	0099      	lsls	r1, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	fbb4 f3f3 	udiv	r3, r4, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Init+0x182>
 800201a:	2301      	movs	r3, #1
 800201c:	e022      	b.n	8002064 <HAL_I2C_Init+0x1c8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10e      	bne.n	8002044 <HAL_I2C_Init+0x1a8>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1e5c      	subs	r4, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	440b      	add	r3, r1
 8002034:	fbb4 f3f3 	udiv	r3, r4, r3
 8002038:	3301      	adds	r3, #1
 800203a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002042:	e00f      	b.n	8002064 <HAL_I2C_Init+0x1c8>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e5c      	subs	r4, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	0099      	lsls	r1, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	fbb4 f3f3 	udiv	r3, r4, r3
 800205a:	3301      	adds	r3, #1
 800205c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002064:	4313      	orrs	r3, r2
 8002066:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	69d0      	ldr	r0, [r2, #28]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6a12      	ldr	r2, [r2, #32]
 800207e:	4302      	orrs	r2, r0
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	6908      	ldr	r0, [r1, #16]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68c9      	ldr	r1, [r1, #12]
 800209e:	4301      	orrs	r1, r0
 80020a0:	430b      	orrs	r3, r1
 80020a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	68d2      	ldr	r2, [r2, #12]
 80020ae:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6950      	ldr	r0, [r2, #20]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6992      	ldr	r2, [r2, #24]
 80020ba:	4302      	orrs	r2, r0
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	000186a0 	.word	0x000186a0
 80020fc:	001e847f 	.word	0x001e847f
 8002100:	003d08ff 	.word	0x003d08ff
 8002104:	431bde83 	.word	0x431bde83
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	461a      	mov	r2, r3
 8002118:	460b      	mov	r3, r1
 800211a:	817b      	strh	r3, [r7, #10]
 800211c:	4613      	mov	r3, r2
 800211e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff fb44 	bl	80017ac <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b20      	cmp	r3, #32
 8002130:	f040 80e0 	bne.w	80022f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2319      	movs	r3, #25
 800213a:	2201      	movs	r2, #1
 800213c:	4970      	ldr	r1, [pc, #448]	; (8002300 <HAL_I2C_Master_Transmit+0x1f4>)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fa92 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
 800214c:	e0d3      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_I2C_Master_Transmit+0x50>
 8002158:	2302      	movs	r3, #2
 800215a:	e0cc      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d007      	beq.n	8002182 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002190:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2221      	movs	r2, #33	; 0x21
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2210      	movs	r2, #16
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a50      	ldr	r2, [pc, #320]	; (8002304 <HAL_I2C_Master_Transmit+0x1f8>)
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021c4:	8979      	ldrh	r1, [r7, #10]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f9ca 	bl	8002564 <I2C_MasterRequestWrite>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e08d      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021f0:	e066      	b.n	80022c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	6a39      	ldr	r1, [r7, #32]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fb0c 	bl	8002814 <I2C_WaitOnTXEFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b04      	cmp	r3, #4
 8002208:	d107      	bne.n	800221a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b04      	cmp	r3, #4
 800225a:	d11b      	bne.n	8002294 <HAL_I2C_Master_Transmit+0x188>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d017      	beq.n	8002294 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	6a39      	ldr	r1, [r7, #32]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fafc 	bl	8002896 <I2C_WaitOnBTFFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e01a      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d194      	bne.n	80021f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	00100002 	.word	0x00100002
 8002304:	ffff0000 	.word	0xffff0000

08002308 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff fa48 	bl	80017ac <HAL_GetTick>
 800231c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800231e:	2301      	movs	r3, #1
 8002320:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b20      	cmp	r3, #32
 800232c:	f040 8110 	bne.w	8002550 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2319      	movs	r3, #25
 8002336:	2201      	movs	r2, #1
 8002338:	4988      	ldr	r1, [pc, #544]	; (800255c <HAL_I2C_IsDeviceReady+0x254>)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f994 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002346:	2302      	movs	r3, #2
 8002348:	e103      	b.n	8002552 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_I2C_IsDeviceReady+0x50>
 8002354:	2302      	movs	r3, #2
 8002356:	e0fc      	b.n	8002552 <HAL_I2C_IsDeviceReady+0x24a>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d007      	beq.n	800237e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f042 0201 	orr.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800238c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2224      	movs	r2, #36	; 0x24
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a70      	ldr	r2, [pc, #448]	; (8002560 <HAL_I2C_IsDeviceReady+0x258>)
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f952 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00d      	beq.n	80023e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d8:	d103      	bne.n	80023e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0b5      	b.n	8002552 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	897a      	ldrh	r2, [r7, #10]
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023f2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff f9da 	bl	80017ac <HAL_GetTick>
 80023f8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b02      	cmp	r3, #2
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002428:	e025      	b.n	8002476 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff f9bf 	bl	80017ac <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad2      	subs	r2, r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d802      	bhi.n	8002440 <HAL_I2C_IsDeviceReady+0x138>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22a0      	movs	r2, #160	; 0xa0
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	bf0c      	ite	eq
 8002456:	2301      	moveq	r3, #1
 8002458:	2300      	movne	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246c:	bf0c      	ite	eq
 800246e:	2301      	moveq	r3, #1
 8002470:	2300      	movne	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2ba0      	cmp	r3, #160	; 0xa0
 8002480:	d005      	beq.n	800248e <HAL_I2C_IsDeviceReady+0x186>
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <HAL_I2C_IsDeviceReady+0x186>
 8002488:	7dbb      	ldrb	r3, [r7, #22]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0cd      	beq.n	800242a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d129      	bne.n	80024f8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b2:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2319      	movs	r3, #25
 80024d0:	2201      	movs	r2, #1
 80024d2:	4922      	ldr	r1, [pc, #136]	; (800255c <HAL_I2C_IsDeviceReady+0x254>)
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f8c7 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e036      	b.n	8002552 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e02c      	b.n	8002552 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002506:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002510:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2319      	movs	r3, #25
 8002518:	2201      	movs	r2, #1
 800251a:	4910      	ldr	r1, [pc, #64]	; (800255c <HAL_I2C_IsDeviceReady+0x254>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f8a3 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e012      	b.n	8002552 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	3301      	adds	r3, #1
 8002530:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	f4ff af33 	bcc.w	80023a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002550:	2302      	movs	r3, #2
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	00100002 	.word	0x00100002
 8002560:	ffff0000 	.word	0xffff0000

08002564 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	460b      	mov	r3, r1
 8002572:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d006      	beq.n	800258e <I2C_MasterRequestWrite+0x2a>
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d003      	beq.n	800258e <I2C_MasterRequestWrite+0x2a>
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800258c:	d108      	bne.n	80025a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e00b      	b.n	80025b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d107      	bne.n	80025b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f84f 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025de:	d103      	bne.n	80025e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e034      	b.n	8002656 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f4:	d107      	bne.n	8002606 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	897a      	ldrh	r2, [r7, #10]
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	e01b      	b.n	800263e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	897a      	ldrh	r2, [r7, #10]
 800260c:	11d2      	asrs	r2, r2, #7
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f002 0206 	and.w	r2, r2, #6
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f062 020f 	orn	r2, r2, #15
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	490f      	ldr	r1, [pc, #60]	; (8002660 <I2C_MasterRequestWrite+0xfc>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f876 	bl	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e010      	b.n	8002656 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	897a      	ldrh	r2, [r7, #10]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <I2C_MasterRequestWrite+0x100>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f866 	bl	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	00010008 	.word	0x00010008
 8002664:	00010002 	.word	0x00010002

08002668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002678:	e025      	b.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d021      	beq.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7ff f893 	bl	80017ac <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad2      	subs	r2, r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d802      	bhi.n	8002698 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d116      	bne.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0220 	orr.w	r2, r3, #32
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e023      	b.n	800270e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10d      	bne.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4013      	ands	r3, r2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	e00c      	b.n	8002706 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	429a      	cmp	r2, r3
 800270a:	d0b6      	beq.n	800267a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002724:	e051      	b.n	80027ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002734:	d123      	bne.n	800277e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002744:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800274e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e046      	b.n	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d021      	beq.n	80027ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002786:	f7ff f811 	bl	80017ac <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	d802      	bhi.n	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d116      	bne.n	80027ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e020      	b.n	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10c      	bne.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4013      	ands	r3, r2
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	e00b      	b.n	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	43da      	mvns	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d18d      	bne.n	8002726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002820:	e02d      	b.n	800287e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f878 	bl	8002918 <I2C_IsAcknowledgeFailed>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e02d      	b.n	800288e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d021      	beq.n	800287e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283a:	f7fe ffb7 	bl	80017ac <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1ad2      	subs	r2, r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	d802      	bhi.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d116      	bne.n	800287e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0220 	orr.w	r2, r3, #32
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e007      	b.n	800288e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d1ca      	bne.n	8002822 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028a2:	e02d      	b.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f837 	bl	8002918 <I2C_IsAcknowledgeFailed>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e02d      	b.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d021      	beq.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028bc:	f7fe ff76 	bl	80017ac <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d802      	bhi.n	80028d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d116      	bne.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e007      	b.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b04      	cmp	r3, #4
 800290c:	d1ca      	bne.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292e:	d11b      	bne.n	8002968 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002938:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0204 	orr.w	r2, r3, #4
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e26c      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8087 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002994:	4b92      	ldr	r3, [pc, #584]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b04      	cmp	r3, #4
 800299e:	d00c      	beq.n	80029ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029a0:	4b8f      	ldr	r3, [pc, #572]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d112      	bne.n	80029d2 <HAL_RCC_OscConfig+0x5e>
 80029ac:	4b8c      	ldr	r3, [pc, #560]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b8:	d10b      	bne.n	80029d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ba:	4b89      	ldr	r3, [pc, #548]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d06c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x12c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d168      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e246      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x76>
 80029dc:	4a80      	ldr	r2, [pc, #512]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 80029de:	4b80      	ldr	r3, [pc, #512]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	e02e      	b.n	8002a48 <HAL_RCC_OscConfig+0xd4>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x98>
 80029f2:	4a7b      	ldr	r2, [pc, #492]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	4b7a      	ldr	r3, [pc, #488]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4a78      	ldr	r2, [pc, #480]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	4b77      	ldr	r3, [pc, #476]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e01d      	b.n	8002a48 <HAL_RCC_OscConfig+0xd4>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0xbc>
 8002a16:	4a72      	ldr	r2, [pc, #456]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4a6f      	ldr	r2, [pc, #444]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	4b6e      	ldr	r3, [pc, #440]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0xd4>
 8002a30:	4a6b      	ldr	r2, [pc, #428]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	4b6b      	ldr	r3, [pc, #428]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	4a68      	ldr	r2, [pc, #416]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d013      	beq.n	8002a78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fe feac 	bl	80017ac <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7fe fea8 	bl	80017ac <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1fa      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0xe4>
 8002a76:	e014      	b.n	8002aa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fe fe98 	bl	80017ac <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe fe94 	bl	80017ac <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1e6      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x10c>
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d063      	beq.n	8002b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aae:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aba:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d11c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x18c>
 8002ac6:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d116      	bne.n	8002b00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_RCC_OscConfig+0x176>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e1ba      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aea:	493d      	ldr	r1, [pc, #244]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	e03a      	b.n	8002b76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d020      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b08:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fe4d 	bl	80017ac <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b16:	f7fe fe49 	bl	80017ac <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e19b      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b34:	492a      	ldr	r1, [pc, #168]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
 8002b48:	e015      	b.n	8002b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe fe2c 	bl	80017ac <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b58:	f7fe fe28 	bl	80017ac <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e17a      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d03a      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d019      	beq.n	8002bbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b90:	f7fe fe0c 	bl	80017ac <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe fe08 	bl	80017ac <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e15a      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f000 fada 	bl	8003170 <RCC_Delay>
 8002bbc:	e01c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fdf2 	bl	80017ac <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bca:	e00f      	b.n	8002bec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fdee 	bl	80017ac <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d908      	bls.n	8002bec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e140      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	42420000 	.word	0x42420000
 8002be8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	4b9e      	ldr	r3, [pc, #632]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e9      	bne.n	8002bcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a6 	beq.w	8002d52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0a:	4b97      	ldr	r3, [pc, #604]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4a94      	ldr	r2, [pc, #592]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	4b93      	ldr	r3, [pc, #588]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	61d3      	str	r3, [r2, #28]
 8002c22:	4b91      	ldr	r3, [pc, #580]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <HAL_RCC_OscConfig+0x4f8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d118      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4a8b      	ldr	r2, [pc, #556]	; (8002e6c <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	4b8a      	ldr	r3, [pc, #552]	; (8002e6c <HAL_RCC_OscConfig+0x4f8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fdaf 	bl	80017ac <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fe fdab 	bl	80017ac <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0fd      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <HAL_RCC_OscConfig+0x4f8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x312>
 8002c78:	4a7b      	ldr	r2, [pc, #492]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c7a:	4b7b      	ldr	r3, [pc, #492]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6213      	str	r3, [r2, #32]
 8002c84:	e02d      	b.n	8002ce2 <HAL_RCC_OscConfig+0x36e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x334>
 8002c8e:	4a76      	ldr	r2, [pc, #472]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	4b75      	ldr	r3, [pc, #468]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6213      	str	r3, [r2, #32]
 8002c9a:	4a73      	ldr	r2, [pc, #460]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	4b72      	ldr	r3, [pc, #456]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	6213      	str	r3, [r2, #32]
 8002ca6:	e01c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x36e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x356>
 8002cb0:	4a6d      	ldr	r2, [pc, #436]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	4a6a      	ldr	r2, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x36e>
 8002cca:	4a67      	ldr	r2, [pc, #412]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	4a64      	ldr	r2, [pc, #400]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fd5f 	bl	80017ac <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fd5b 	bl	80017ac <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0ab      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ee      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x37e>
 8002d14:	e014      	b.n	8002d40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fd49 	bl	80017ac <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe fd45 	bl	80017ac <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e095      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	4b4c      	ldr	r3, [pc, #304]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ee      	bne.n	8002d1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d105      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d46:	4a48      	ldr	r2, [pc, #288]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8081 	beq.w	8002e5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d5c:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d061      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d146      	bne.n	8002dfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <HAL_RCC_OscConfig+0x4fc>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fd19 	bl	80017ac <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe fd15 	bl	80017ac <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e067      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d90:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da4:	d108      	bne.n	8002db8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002da6:	4930      	ldr	r1, [pc, #192]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db8:	482b      	ldr	r0, [pc, #172]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a19      	ldr	r1, [r3, #32]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_OscConfig+0x4fc>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fce9 	bl	80017ac <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe fce5 	bl	80017ac <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e037      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x46a>
 8002dfc:	e02f      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_RCC_OscConfig+0x4fc>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fcd2 	bl	80017ac <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fcce 	bl	80017ac <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e020      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x498>
 8002e2a:	e018      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e013      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42420060 	.word	0x42420060

08002e74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0d0      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0207 	and.w	r2, r3, #7
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d210      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4967      	ldr	r1, [pc, #412]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	4b66      	ldr	r3, [pc, #408]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 0207 	bic.w	r2, r3, #7
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0207 	and.w	r2, r3, #7
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0b8      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed0:	4a59      	ldr	r2, [pc, #356]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee8:	4a53      	ldr	r2, [pc, #332]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	4b53      	ldr	r3, [pc, #332]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ef2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef4:	4950      	ldr	r1, [pc, #320]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	4b50      	ldr	r3, [pc, #320]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d040      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d115      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07f      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e073      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06b      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4939      	ldr	r1, [pc, #228]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 0203 	bic.w	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fc22 	bl	80017ac <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fe fc1e 	bl	80017ac <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e053      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0207 	and.w	r2, r3, #7
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d910      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4924      	ldr	r1, [pc, #144]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 0207 	bic.w	r2, r3, #7
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0207 	and.w	r2, r3, #7
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e032      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd0:	4919      	ldr	r1, [pc, #100]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fee:	4912      	ldr	r1, [pc, #72]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003002:	f000 f821 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003006:	4601      	mov	r1, r0
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	fa21 f303 	lsr.w	r3, r1, r3
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1cc>)
 800301c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1d0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fb80 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40022000 	.word	0x40022000
 8003038:	40021000 	.word	0x40021000
 800303c:	08007080 	.word	0x08007080
 8003040:	20000010 	.word	0x20000010
 8003044:	20000014 	.word	0x20000014

08003048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b490      	push	{r4, r7}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003050:	1d3c      	adds	r4, r7, #4
 8003052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x40>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x46>
 8003086:	e02d      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_GetSysClockFreq+0xbc>)
 800308a:	623b      	str	r3, [r7, #32]
      break;
 800308c:	e02d      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	0c9b      	lsrs	r3, r3, #18
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800309a:	4413      	add	r3, r2
 800309c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ac:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	0c5b      	lsrs	r3, r3, #17
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ba:	4413      	add	r3, r2
 80030bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030c6:	fb02 f203 	mul.w	r2, r2, r3
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
 80030d2:	e004      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d8:	fb02 f303 	mul.w	r3, r2, r3
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	623b      	str	r3, [r7, #32]
      break;
 80030e2:	e002      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e6:	623b      	str	r3, [r7, #32]
      break;
 80030e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3728      	adds	r7, #40	; 0x28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc90      	pop	{r4, r7}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	08004fc4 	.word	0x08004fc4
 80030fc:	08004fd4 	.word	0x08004fd4
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	003d0900 	.word	0x003d0900

0800310c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003110:	4b02      	ldr	r3, [pc, #8]	; (800311c <HAL_RCC_GetHCLKFreq+0x10>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	20000010 	.word	0x20000010

08003120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003124:	f7ff fff2 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003128:	4601      	mov	r1, r0
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4a03      	ldr	r2, [pc, #12]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	fa21 f303 	lsr.w	r3, r1, r3
}
 800313c:	4618      	mov	r0, r3
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	08007090 	.word	0x08007090

08003148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800314c:	f7ff ffde 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003150:	4601      	mov	r1, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	0adb      	lsrs	r3, r3, #11
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4a03      	ldr	r2, [pc, #12]	; (800316c <HAL_RCC_GetPCLK2Freq+0x24>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000
 800316c:	08007090 	.word	0x08007090

08003170 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <RCC_Delay+0x34>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <RCC_Delay+0x38>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0a5b      	lsrs	r3, r3, #9
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800318c:	bf00      	nop
  }
  while (Delay --);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e5a      	subs	r2, r3, #1
 8003192:	60fa      	str	r2, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f9      	bne.n	800318c <RCC_Delay+0x1c>
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000010 	.word	0x20000010
 80031a8:	10624dd3 	.word	0x10624dd3

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e041      	b.n	8003242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe f9b4 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 fae8 	bl	80037c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d001      	beq.n	8003264 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e032      	b.n	80032ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_TIM_Base_Start+0x88>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_TIM_Base_Start+0x48>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d009      	beq.n	8003294 <HAL_TIM_Base_Start+0x48>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <HAL_TIM_Base_Start+0x8c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_TIM_Base_Start+0x48>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_TIM_Base_Start+0x90>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d111      	bne.n	80032b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d010      	beq.n	80032c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b6:	e007      	b.n	80032c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800

080032e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e041      	b.n	8003376 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f839 	bl	800337e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 fa4e 	bl	80037c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_TIM_PWM_Start+0x24>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e022      	b.n	80033fa <HAL_TIM_PWM_Start+0x6a>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d109      	bne.n	80033ce <HAL_TIM_PWM_Start+0x3e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e015      	b.n	80033fa <HAL_TIM_PWM_Start+0x6a>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d109      	bne.n	80033e8 <HAL_TIM_PWM_Start+0x58>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e008      	b.n	80033fa <HAL_TIM_PWM_Start+0x6a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e05e      	b.n	80034c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0x82>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003410:	e013      	b.n	800343a <HAL_TIM_PWM_Start+0xaa>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Start+0x92>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003420:	e00b      	b.n	800343a <HAL_TIM_PWM_Start+0xaa>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Start+0xa2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003430:	e003      	b.n	800343a <HAL_TIM_PWM_Start+0xaa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2202      	movs	r2, #2
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fc3c 	bl	8003cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <HAL_TIM_PWM_Start+0x138>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d107      	bne.n	8003462 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800345c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_TIM_PWM_Start+0x138>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_TIM_PWM_Start+0xfa>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003474:	d009      	beq.n	800348a <HAL_TIM_PWM_Start+0xfa>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a14      	ldr	r2, [pc, #80]	; (80034cc <HAL_TIM_PWM_Start+0x13c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_TIM_PWM_Start+0xfa>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <HAL_TIM_PWM_Start+0x140>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d111      	bne.n	80034ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b06      	cmp	r3, #6
 800349a:	d010      	beq.n	80034be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ac:	e007      	b.n	80034be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800

080034d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0ac      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x174>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	f200 809f 	bhi.w	800363c <HAL_TIM_PWM_ConfigChannel+0x168>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003539 	.word	0x08003539
 8003508:	0800363d 	.word	0x0800363d
 800350c:	0800363d 	.word	0x0800363d
 8003510:	0800363d 	.word	0x0800363d
 8003514:	08003579 	.word	0x08003579
 8003518:	0800363d 	.word	0x0800363d
 800351c:	0800363d 	.word	0x0800363d
 8003520:	0800363d 	.word	0x0800363d
 8003524:	080035bb 	.word	0x080035bb
 8003528:	0800363d 	.word	0x0800363d
 800352c:	0800363d 	.word	0x0800363d
 8003530:	0800363d 	.word	0x0800363d
 8003534:	080035fb 	.word	0x080035fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f9a0 	bl	8003884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	6992      	ldr	r2, [r2, #24]
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	6992      	ldr	r2, [r2, #24]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	6991      	ldr	r1, [r2, #24]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	6912      	ldr	r2, [r2, #16]
 8003572:	430a      	orrs	r2, r1
 8003574:	619a      	str	r2, [r3, #24]
      break;
 8003576:	e062      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f9e6 	bl	8003950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	6992      	ldr	r2, [r2, #24]
 800358e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	6992      	ldr	r2, [r2, #24]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	6991      	ldr	r1, [r2, #24]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	6912      	ldr	r2, [r2, #16]
 80035b2:	0212      	lsls	r2, r2, #8
 80035b4:	430a      	orrs	r2, r1
 80035b6:	619a      	str	r2, [r3, #24]
      break;
 80035b8:	e041      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fa2f 	bl	8003a24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	69d2      	ldr	r2, [r2, #28]
 80035d0:	f042 0208 	orr.w	r2, r2, #8
 80035d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	69d2      	ldr	r2, [r2, #28]
 80035e0:	f022 0204 	bic.w	r2, r2, #4
 80035e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	69d1      	ldr	r1, [r2, #28]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	6912      	ldr	r2, [r2, #16]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	61da      	str	r2, [r3, #28]
      break;
 80035f8:	e021      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fa79 	bl	8003af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	69d2      	ldr	r2, [r2, #28]
 8003610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	69d2      	ldr	r2, [r2, #28]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	69d1      	ldr	r1, [r2, #28]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	6912      	ldr	r2, [r2, #16]
 8003634:	0212      	lsls	r2, r2, #8
 8003636:	430a      	orrs	r2, r1
 8003638:	61da      	str	r2, [r3, #28]
      break;
 800363a:	e000      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800363c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_TIM_ConfigClockSource+0x18>
 8003664:	2302      	movs	r3, #2
 8003666:	e0a6      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x166>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003686:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800368e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d067      	beq.n	8003770 <HAL_TIM_ConfigClockSource+0x120>
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d80b      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x6c>
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d073      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x140>
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d802      	bhi.n	80036b2 <HAL_TIM_ConfigClockSource+0x62>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d06f      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036b0:	e078      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d06c      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x140>
 80036b6:	2b30      	cmp	r3, #48	; 0x30
 80036b8:	d06a      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036ba:	e073      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036bc:	2b70      	cmp	r3, #112	; 0x70
 80036be:	d00d      	beq.n	80036dc <HAL_TIM_ConfigClockSource+0x8c>
 80036c0:	2b70      	cmp	r3, #112	; 0x70
 80036c2:	d804      	bhi.n	80036ce <HAL_TIM_ConfigClockSource+0x7e>
 80036c4:	2b50      	cmp	r3, #80	; 0x50
 80036c6:	d033      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0xe0>
 80036c8:	2b60      	cmp	r3, #96	; 0x60
 80036ca:	d041      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036cc:	e06a      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d2:	d066      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x152>
 80036d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d8:	d017      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036da:	e063      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6899      	ldr	r1, [r3, #8]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f000 fac9 	bl	8003c82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]
      break;
 8003708:	e04c      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f000 fab2 	bl	8003c82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372c:	609a      	str	r2, [r3, #8]
      break;
 800372e:	e039      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	461a      	mov	r2, r3
 800373e:	f000 fa29 	bl	8003b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2150      	movs	r1, #80	; 0x50
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fa80 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 800374e:	e029      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	f000 fa47 	bl	8003bf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2160      	movs	r1, #96	; 0x60
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fa70 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 800376e:	e019      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	461a      	mov	r2, r3
 800377e:	f000 fa09 	bl	8003b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2140      	movs	r1, #64	; 0x40
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fa60 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 800378e:	e009      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f000 fa57 	bl	8003c4e <TIM_ITRx_SetConfig>
        break;
 80037a0:	e000      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80037a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a29      	ldr	r2, [pc, #164]	; (8003878 <TIM_Base_SetConfig+0xb8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <TIM_Base_SetConfig+0x30>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d007      	beq.n	80037f0 <TIM_Base_SetConfig+0x30>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a26      	ldr	r2, [pc, #152]	; (800387c <TIM_Base_SetConfig+0xbc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0x30>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a25      	ldr	r2, [pc, #148]	; (8003880 <TIM_Base_SetConfig+0xc0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d108      	bne.n	8003802 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1c      	ldr	r2, [pc, #112]	; (8003878 <TIM_Base_SetConfig+0xb8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00b      	beq.n	8003822 <TIM_Base_SetConfig+0x62>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003810:	d007      	beq.n	8003822 <TIM_Base_SetConfig+0x62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <TIM_Base_SetConfig+0xbc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_Base_SetConfig+0x62>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <TIM_Base_SetConfig+0xc0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d108      	bne.n	8003834 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a07      	ldr	r2, [pc, #28]	; (8003878 <TIM_Base_SetConfig+0xb8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	615a      	str	r2, [r3, #20]
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800

08003884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0201 	bic.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 0302 	bic.w	r3, r3, #2
 80038cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <TIM_OC1_SetConfig+0xc8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10c      	bne.n	80038fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0308 	bic.w	r3, r3, #8
 80038e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a13      	ldr	r2, [pc, #76]	; (800394c <TIM_OC1_SetConfig+0xc8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d111      	bne.n	8003926 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	621a      	str	r2, [r3, #32]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40012c00 	.word	0x40012c00

08003950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0210 	bic.w	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0320 	bic.w	r3, r3, #32
 800399a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <TIM_OC2_SetConfig+0xd0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10d      	bne.n	80039cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <TIM_OC2_SetConfig+0xd0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d113      	bne.n	80039fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00

08003a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <TIM_OC3_SetConfig+0xd0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10d      	bne.n	8003a9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <TIM_OC3_SetConfig+0xd0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d113      	bne.n	8003ace <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40012c00 	.word	0x40012c00

08003af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	031b      	lsls	r3, r3, #12
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0f      	ldr	r2, [pc, #60]	; (8003b90 <TIM_OC4_SetConfig+0x98>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d109      	bne.n	8003b6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00

08003b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 030a 	bic.w	r3, r3, #10
 8003bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 0210 	bic.w	r2, r3, #16
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	031b      	lsls	r3, r3, #12
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f043 0307 	orr.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	021a      	lsls	r2, r3, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	609a      	str	r2, [r3, #8]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1a      	ldr	r2, [r3, #32]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e046      	b.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6c:	d009      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a10      	ldr	r2, [pc, #64]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10c      	bne.n	8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800

08003dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e03f      	b.n	8003e56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd fc32 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	68d2      	ldr	r2, [r2, #12]
 8003e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fbab 	bl	8004564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	6912      	ldr	r2, [r2, #16]
 8003e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	6952      	ldr	r2, [r2, #20]
 8003e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	68d2      	ldr	r2, [r2, #12]
 8003e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d11d      	bne.n	8003eb4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_UART_Receive_IT+0x26>
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e016      	b.n	8003eb6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Receive_IT+0x38>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e00f      	b.n	8003eb6 <HAL_UART_Receive_IT+0x58>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f9d1 	bl	8004252 <UART_Start_Receive_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	e000      	b.n	8003eb6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	; 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10d      	bne.n	8003f12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_UART_IRQHandler+0x52>
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa80 	bl	8004410 <UART_Receive_IT>
      return;
 8003f10:	e17c      	b.n	800420c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80b1 	beq.w	800407c <HAL_UART_IRQHandler+0x1bc>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_UART_IRQHandler+0x70>
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80a6 	beq.w	800407c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_UART_IRQHandler+0x90>
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_UART_IRQHandler+0xb0>
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f043 0202 	orr.w	r2, r3, #2
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_UART_IRQHandler+0xd0>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f043 0204 	orr.w	r2, r3, #4
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00f      	beq.n	8003fba <HAL_UART_IRQHandler+0xfa>
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d104      	bne.n	8003fae <HAL_UART_IRQHandler+0xee>
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f043 0208 	orr.w	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 811f 	beq.w	8004202 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_UART_IRQHandler+0x11e>
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fa19 	bl	8004410 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <HAL_UART_IRQHandler+0x146>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d031      	beq.n	800406a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f95c 	bl	80042c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d023      	beq.n	8004062 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	6952      	ldr	r2, [r2, #20]
 8004024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004028:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	4a77      	ldr	r2, [pc, #476]	; (8004214 <HAL_UART_IRQHandler+0x354>)
 8004038:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fd26 	bl	8001a90 <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00e      	b.n	8004078 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8e5 	bl	800422a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00a      	b.n	8004078 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8e1 	bl	800422a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e006      	b.n	8004078 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8dd 	bl	800422a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004076:	e0c4      	b.n	8004202 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	bf00      	nop
    return;
 800407a:	e0c2      	b.n	8004202 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 80a1 	bne.w	80041c8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 809b 	beq.w	80041c8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8095 	beq.w	80041c8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04e      	beq.n	8004160 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 80040cc:	8a7b      	ldrh	r3, [r7, #18]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8099 	beq.w	8004206 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d8:	8a7a      	ldrh	r2, [r7, #18]
 80040da:	429a      	cmp	r2, r3
 80040dc:	f080 8093 	bcs.w	8004206 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8a7a      	ldrh	r2, [r7, #18]
 80040e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d02b      	beq.n	8004148 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	68d2      	ldr	r2, [r2, #12]
 80040fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040fe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	6952      	ldr	r2, [r2, #20]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	6952      	ldr	r2, [r2, #20]
 800411a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	68d2      	ldr	r2, [r2, #12]
 8004138:	f022 0210 	bic.w	r2, r2, #16
 800413c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fc69 	bl	8001a1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004150:	b29b      	uxth	r3, r3
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	b29b      	uxth	r3, r3
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f86f 	bl	800423c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800415e:	e052      	b.n	8004206 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004168:	b29b      	uxth	r3, r3
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d048      	beq.n	800420a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004178:	8a3b      	ldrh	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d045      	beq.n	800420a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	68d2      	ldr	r2, [r2, #12]
 8004188:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800418c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6952      	ldr	r2, [r2, #20]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	68d2      	ldr	r2, [r2, #12]
 80041b6:	f022 0210 	bic.w	r2, r2, #16
 80041ba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041bc:	8a3b      	ldrh	r3, [r7, #16]
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f83b 	bl	800423c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041c6:	e020      	b.n	800420a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_UART_IRQHandler+0x324>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8b1 	bl	8004344 <UART_Transmit_IT>
    return;
 80041e2:	e013      	b.n	800420c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <HAL_UART_IRQHandler+0x34c>
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f8f1 	bl	80043e0 <UART_EndTransmit_IT>
    return;
 80041fe:	bf00      	nop
 8004200:	e004      	b.n	800420c <HAL_UART_IRQHandler+0x34c>
    return;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <HAL_UART_IRQHandler+0x34c>
      return;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_UART_IRQHandler+0x34c>
      return;
 800420a:	bf00      	nop
  }
}
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	0800431d 	.word	0x0800431d

08004218 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	4613      	mov	r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	88fa      	ldrh	r2, [r7, #6]
 800426a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2222      	movs	r2, #34	; 0x22
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	68d2      	ldr	r2, [r2, #12]
 8004292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004296:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	6952      	ldr	r2, [r2, #20]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	f042 0220 	orr.w	r2, r2, #32
 80042b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	6952      	ldr	r2, [r2, #20]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	f022 0210 	bic.w	r2, r2, #16
 8004302:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff ff77 	bl	800422a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b21      	cmp	r3, #33	; 0x21
 8004356:	d13d      	bne.n	80043d4 <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004360:	d113      	bne.n	800438a <UART_Transmit_IT+0x46>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	8812      	ldrh	r2, [r2, #0]
 8004378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	621a      	str	r2, [r3, #32]
 8004388:	e008      	b.n	800439c <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	1c58      	adds	r0, r3, #1
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	6208      	str	r0, [r1, #32]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4619      	mov	r1, r3
 80043aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10f      	bne.n	80043d0 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	68d2      	ldr	r2, [r2, #12]
 80043ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff09 	bl	8004218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b22      	cmp	r3, #34	; 0x22
 8004422:	f040 8099 	bne.w	8004558 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	d117      	bne.n	8004460 <UART_Receive_IT+0x50>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d113      	bne.n	8004460 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	b29a      	uxth	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	1c9a      	adds	r2, r3, #2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
 800445e:	e026      	b.n	80044ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	d007      	beq.n	8004484 <UART_Receive_IT+0x74>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <UART_Receive_IT+0x82>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e008      	b.n	80044a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4619      	mov	r1, r3
 80044bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d148      	bne.n	8004554 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	68d2      	ldr	r2, [r2, #12]
 80044cc:	f022 0220 	bic.w	r2, r2, #32
 80044d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	68d2      	ldr	r2, [r2, #12]
 80044dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	6952      	ldr	r2, [r2, #20]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d123      	bne.n	800454a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	68d2      	ldr	r2, [r2, #12]
 8004512:	f022 0210 	bic.w	r2, r2, #16
 8004516:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b10      	cmp	r3, #16
 8004524:	d10a      	bne.n	800453c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fe7a 	bl	800423c <HAL_UARTEx_RxEventCallback>
 8004548:	e002      	b.n	8004550 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fc fbf3 	bl	8000d36 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e002      	b.n	800455a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	6912      	ldr	r2, [r2, #16]
 8004576:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	430a      	orrs	r2, r1
 8004580:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045a2:	f023 030c 	bic.w	r3, r3, #12
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	6952      	ldr	r2, [r2, #20]
 80045b6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6992      	ldr	r2, [r2, #24]
 80045be:	430a      	orrs	r2, r1
 80045c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <UART_SetConfig+0x114>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d103      	bne.n	80045d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045cc:	f7fe fdbc 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	e002      	b.n	80045da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fe fda4 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 80045d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <UART_SetConfig+0x118>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	0118      	lsls	r0, r3, #4
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009a      	lsls	r2, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	fbb2 f2f3 	udiv	r2, r2, r3
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <UART_SetConfig+0x118>)
 8004616:	fba3 4302 	umull	r4, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2464      	movs	r4, #100	; 0x64
 800461e:	fb04 f303 	mul.w	r3, r4, r3
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	3332      	adds	r3, #50	; 0x32
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004634:	4418      	add	r0, r3
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	fbb2 f2f3 	udiv	r2, r2, r3
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <UART_SetConfig+0x118>)
 800464e:	fba3 4302 	umull	r4, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2464      	movs	r4, #100	; 0x64
 8004656:	fb04 f303 	mul.w	r3, r4, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	; 0x32
 8004660:	4a06      	ldr	r2, [pc, #24]	; (800467c <UART_SetConfig+0x118>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	4403      	add	r3, r0
 800466e:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	bd90      	pop	{r4, r7, pc}
 8004678:	40013800 	.word	0x40013800
 800467c:	51eb851f 	.word	0x51eb851f

08004680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004680:	480c      	ldr	r0, [pc, #48]	; (80046b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004682:	490d      	ldr	r1, [pc, #52]	; (80046b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004684:	4a0d      	ldr	r2, [pc, #52]	; (80046bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004688:	e002      	b.n	8004690 <LoopCopyDataInit>

0800468a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800468a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800468c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800468e:	3304      	adds	r3, #4

08004690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004694:	d3f9      	bcc.n	800468a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004696:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004698:	4c0a      	ldr	r4, [pc, #40]	; (80046c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800469a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800469c:	e001      	b.n	80046a2 <LoopFillZerobss>

0800469e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800469e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046a0:	3204      	adds	r2, #4

080046a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046a4:	d3fb      	bcc.n	800469e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046a6:	f7fc fe81 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046aa:	f000 f815 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046ae:	f7fc f9ff 	bl	8000ab0 <main>
  bx lr
 80046b2:	4770      	bx	lr
  ldr r0, =_sdata
 80046b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046b8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80046bc:	080070d4 	.word	0x080070d4
  ldr r2, =_sbss
 80046c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80046c4:	200005fc 	.word	0x200005fc

080046c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046c8:	e7fe      	b.n	80046c8 <ADC1_2_IRQHandler>
	...

080046cc <__errno>:
 80046cc:	4b01      	ldr	r3, [pc, #4]	; (80046d4 <__errno+0x8>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000001c 	.word	0x2000001c

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	2500      	movs	r5, #0
 80046dc:	4e0c      	ldr	r6, [pc, #48]	; (8004710 <__libc_init_array+0x38>)
 80046de:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046e0:	1ba4      	subs	r4, r4, r6
 80046e2:	10a4      	asrs	r4, r4, #2
 80046e4:	42a5      	cmp	r5, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	f000 fc4e 	bl	8004f88 <_init>
 80046ec:	2500      	movs	r5, #0
 80046ee:	4e0a      	ldr	r6, [pc, #40]	; (8004718 <__libc_init_array+0x40>)
 80046f0:	4c0a      	ldr	r4, [pc, #40]	; (800471c <__libc_init_array+0x44>)
 80046f2:	1ba4      	subs	r4, r4, r6
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	42a5      	cmp	r5, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004700:	4798      	blx	r3
 8004702:	3501      	adds	r5, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800470a:	4798      	blx	r3
 800470c:	3501      	adds	r5, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	080070cc 	.word	0x080070cc
 8004714:	080070cc 	.word	0x080070cc
 8004718:	080070cc 	.word	0x080070cc
 800471c:	080070d0 	.word	0x080070d0

08004720 <memset>:
 8004720:	4603      	mov	r3, r0
 8004722:	4402      	add	r2, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	f803 1b01 	strb.w	r1, [r3], #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <siprintf>:
 8004730:	b40e      	push	{r1, r2, r3}
 8004732:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004736:	b500      	push	{lr}
 8004738:	b09c      	sub	sp, #112	; 0x70
 800473a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800473e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004742:	9104      	str	r1, [sp, #16]
 8004744:	9107      	str	r1, [sp, #28]
 8004746:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800474a:	ab1d      	add	r3, sp, #116	; 0x74
 800474c:	9002      	str	r0, [sp, #8]
 800474e:	9006      	str	r0, [sp, #24]
 8004750:	4808      	ldr	r0, [pc, #32]	; (8004774 <siprintf+0x44>)
 8004752:	f853 2b04 	ldr.w	r2, [r3], #4
 8004756:	f8ad 1016 	strh.w	r1, [sp, #22]
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	a902      	add	r1, sp, #8
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	f000 f866 	bl	8004830 <_svfiprintf_r>
 8004764:	2200      	movs	r2, #0
 8004766:	9b02      	ldr	r3, [sp, #8]
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	b01c      	add	sp, #112	; 0x70
 800476c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004770:	b003      	add	sp, #12
 8004772:	4770      	bx	lr
 8004774:	2000001c 	.word	0x2000001c

08004778 <__ssputs_r>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	688e      	ldr	r6, [r1, #8]
 800477e:	4682      	mov	sl, r0
 8004780:	429e      	cmp	r6, r3
 8004782:	460c      	mov	r4, r1
 8004784:	4691      	mov	r9, r2
 8004786:	4698      	mov	r8, r3
 8004788:	d835      	bhi.n	80047f6 <__ssputs_r+0x7e>
 800478a:	898a      	ldrh	r2, [r1, #12]
 800478c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004790:	d031      	beq.n	80047f6 <__ssputs_r+0x7e>
 8004792:	2302      	movs	r3, #2
 8004794:	6825      	ldr	r5, [r4, #0]
 8004796:	6909      	ldr	r1, [r1, #16]
 8004798:	1a6f      	subs	r7, r5, r1
 800479a:	6965      	ldr	r5, [r4, #20]
 800479c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80047a4:	f108 0301 	add.w	r3, r8, #1
 80047a8:	443b      	add	r3, r7
 80047aa:	429d      	cmp	r5, r3
 80047ac:	bf38      	it	cc
 80047ae:	461d      	movcc	r5, r3
 80047b0:	0553      	lsls	r3, r2, #21
 80047b2:	d531      	bpl.n	8004818 <__ssputs_r+0xa0>
 80047b4:	4629      	mov	r1, r5
 80047b6:	f000 fb47 	bl	8004e48 <_malloc_r>
 80047ba:	4606      	mov	r6, r0
 80047bc:	b950      	cbnz	r0, 80047d4 <__ssputs_r+0x5c>
 80047be:	230c      	movs	r3, #12
 80047c0:	f8ca 3000 	str.w	r3, [sl]
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d4:	463a      	mov	r2, r7
 80047d6:	6921      	ldr	r1, [r4, #16]
 80047d8:	f000 fac4 	bl	8004d64 <memcpy>
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	6126      	str	r6, [r4, #16]
 80047ea:	443e      	add	r6, r7
 80047ec:	6026      	str	r6, [r4, #0]
 80047ee:	4646      	mov	r6, r8
 80047f0:	6165      	str	r5, [r4, #20]
 80047f2:	1bed      	subs	r5, r5, r7
 80047f4:	60a5      	str	r5, [r4, #8]
 80047f6:	4546      	cmp	r6, r8
 80047f8:	bf28      	it	cs
 80047fa:	4646      	movcs	r6, r8
 80047fc:	4649      	mov	r1, r9
 80047fe:	4632      	mov	r2, r6
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	f000 faba 	bl	8004d7a <memmove>
 8004806:	68a3      	ldr	r3, [r4, #8]
 8004808:	2000      	movs	r0, #0
 800480a:	1b9b      	subs	r3, r3, r6
 800480c:	60a3      	str	r3, [r4, #8]
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	441e      	add	r6, r3
 8004812:	6026      	str	r6, [r4, #0]
 8004814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004818:	462a      	mov	r2, r5
 800481a:	f000 fb73 	bl	8004f04 <_realloc_r>
 800481e:	4606      	mov	r6, r0
 8004820:	2800      	cmp	r0, #0
 8004822:	d1e1      	bne.n	80047e8 <__ssputs_r+0x70>
 8004824:	6921      	ldr	r1, [r4, #16]
 8004826:	4650      	mov	r0, sl
 8004828:	f000 fac2 	bl	8004db0 <_free_r>
 800482c:	e7c7      	b.n	80047be <__ssputs_r+0x46>
	...

08004830 <_svfiprintf_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	b09d      	sub	sp, #116	; 0x74
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	898b      	ldrh	r3, [r1, #12]
 800483a:	4680      	mov	r8, r0
 800483c:	061c      	lsls	r4, r3, #24
 800483e:	460d      	mov	r5, r1
 8004840:	4616      	mov	r6, r2
 8004842:	d50f      	bpl.n	8004864 <_svfiprintf_r+0x34>
 8004844:	690b      	ldr	r3, [r1, #16]
 8004846:	b96b      	cbnz	r3, 8004864 <_svfiprintf_r+0x34>
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	f000 fafd 	bl	8004e48 <_malloc_r>
 800484e:	6028      	str	r0, [r5, #0]
 8004850:	6128      	str	r0, [r5, #16]
 8004852:	b928      	cbnz	r0, 8004860 <_svfiprintf_r+0x30>
 8004854:	230c      	movs	r3, #12
 8004856:	f8c8 3000 	str.w	r3, [r8]
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	e0c4      	b.n	80049ea <_svfiprintf_r+0x1ba>
 8004860:	2340      	movs	r3, #64	; 0x40
 8004862:	616b      	str	r3, [r5, #20]
 8004864:	2300      	movs	r3, #0
 8004866:	9309      	str	r3, [sp, #36]	; 0x24
 8004868:	2320      	movs	r3, #32
 800486a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800486e:	2330      	movs	r3, #48	; 0x30
 8004870:	f04f 0b01 	mov.w	fp, #1
 8004874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004878:	4637      	mov	r7, r6
 800487a:	463c      	mov	r4, r7
 800487c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d13c      	bne.n	80048fe <_svfiprintf_r+0xce>
 8004884:	ebb7 0a06 	subs.w	sl, r7, r6
 8004888:	d00b      	beq.n	80048a2 <_svfiprintf_r+0x72>
 800488a:	4653      	mov	r3, sl
 800488c:	4632      	mov	r2, r6
 800488e:	4629      	mov	r1, r5
 8004890:	4640      	mov	r0, r8
 8004892:	f7ff ff71 	bl	8004778 <__ssputs_r>
 8004896:	3001      	adds	r0, #1
 8004898:	f000 80a2 	beq.w	80049e0 <_svfiprintf_r+0x1b0>
 800489c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800489e:	4453      	add	r3, sl
 80048a0:	9309      	str	r3, [sp, #36]	; 0x24
 80048a2:	783b      	ldrb	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 809b 	beq.w	80049e0 <_svfiprintf_r+0x1b0>
 80048aa:	2300      	movs	r3, #0
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	9307      	str	r3, [sp, #28]
 80048b4:	9205      	str	r2, [sp, #20]
 80048b6:	9306      	str	r3, [sp, #24]
 80048b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048bc:	931a      	str	r3, [sp, #104]	; 0x68
 80048be:	2205      	movs	r2, #5
 80048c0:	7821      	ldrb	r1, [r4, #0]
 80048c2:	4850      	ldr	r0, [pc, #320]	; (8004a04 <_svfiprintf_r+0x1d4>)
 80048c4:	f000 fa40 	bl	8004d48 <memchr>
 80048c8:	1c67      	adds	r7, r4, #1
 80048ca:	9b04      	ldr	r3, [sp, #16]
 80048cc:	b9d8      	cbnz	r0, 8004906 <_svfiprintf_r+0xd6>
 80048ce:	06d9      	lsls	r1, r3, #27
 80048d0:	bf44      	itt	mi
 80048d2:	2220      	movmi	r2, #32
 80048d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048d8:	071a      	lsls	r2, r3, #28
 80048da:	bf44      	itt	mi
 80048dc:	222b      	movmi	r2, #43	; 0x2b
 80048de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048e2:	7822      	ldrb	r2, [r4, #0]
 80048e4:	2a2a      	cmp	r2, #42	; 0x2a
 80048e6:	d016      	beq.n	8004916 <_svfiprintf_r+0xe6>
 80048e8:	2100      	movs	r1, #0
 80048ea:	200a      	movs	r0, #10
 80048ec:	9a07      	ldr	r2, [sp, #28]
 80048ee:	4627      	mov	r7, r4
 80048f0:	783b      	ldrb	r3, [r7, #0]
 80048f2:	3401      	adds	r4, #1
 80048f4:	3b30      	subs	r3, #48	; 0x30
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	d950      	bls.n	800499c <_svfiprintf_r+0x16c>
 80048fa:	b1c9      	cbz	r1, 8004930 <_svfiprintf_r+0x100>
 80048fc:	e011      	b.n	8004922 <_svfiprintf_r+0xf2>
 80048fe:	2b25      	cmp	r3, #37	; 0x25
 8004900:	d0c0      	beq.n	8004884 <_svfiprintf_r+0x54>
 8004902:	4627      	mov	r7, r4
 8004904:	e7b9      	b.n	800487a <_svfiprintf_r+0x4a>
 8004906:	4a3f      	ldr	r2, [pc, #252]	; (8004a04 <_svfiprintf_r+0x1d4>)
 8004908:	463c      	mov	r4, r7
 800490a:	1a80      	subs	r0, r0, r2
 800490c:	fa0b f000 	lsl.w	r0, fp, r0
 8004910:	4318      	orrs	r0, r3
 8004912:	9004      	str	r0, [sp, #16]
 8004914:	e7d3      	b.n	80048be <_svfiprintf_r+0x8e>
 8004916:	9a03      	ldr	r2, [sp, #12]
 8004918:	1d11      	adds	r1, r2, #4
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	9103      	str	r1, [sp, #12]
 800491e:	2a00      	cmp	r2, #0
 8004920:	db01      	blt.n	8004926 <_svfiprintf_r+0xf6>
 8004922:	9207      	str	r2, [sp, #28]
 8004924:	e004      	b.n	8004930 <_svfiprintf_r+0x100>
 8004926:	4252      	negs	r2, r2
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	9207      	str	r2, [sp, #28]
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	783b      	ldrb	r3, [r7, #0]
 8004932:	2b2e      	cmp	r3, #46	; 0x2e
 8004934:	d10d      	bne.n	8004952 <_svfiprintf_r+0x122>
 8004936:	787b      	ldrb	r3, [r7, #1]
 8004938:	1c79      	adds	r1, r7, #1
 800493a:	2b2a      	cmp	r3, #42	; 0x2a
 800493c:	d132      	bne.n	80049a4 <_svfiprintf_r+0x174>
 800493e:	9b03      	ldr	r3, [sp, #12]
 8004940:	3702      	adds	r7, #2
 8004942:	1d1a      	adds	r2, r3, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	9203      	str	r2, [sp, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	bfb8      	it	lt
 800494c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004950:	9305      	str	r3, [sp, #20]
 8004952:	4c2d      	ldr	r4, [pc, #180]	; (8004a08 <_svfiprintf_r+0x1d8>)
 8004954:	2203      	movs	r2, #3
 8004956:	7839      	ldrb	r1, [r7, #0]
 8004958:	4620      	mov	r0, r4
 800495a:	f000 f9f5 	bl	8004d48 <memchr>
 800495e:	b138      	cbz	r0, 8004970 <_svfiprintf_r+0x140>
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	1b00      	subs	r0, r0, r4
 8004964:	fa03 f000 	lsl.w	r0, r3, r0
 8004968:	9b04      	ldr	r3, [sp, #16]
 800496a:	3701      	adds	r7, #1
 800496c:	4303      	orrs	r3, r0
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	7839      	ldrb	r1, [r7, #0]
 8004972:	2206      	movs	r2, #6
 8004974:	4825      	ldr	r0, [pc, #148]	; (8004a0c <_svfiprintf_r+0x1dc>)
 8004976:	1c7e      	adds	r6, r7, #1
 8004978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800497c:	f000 f9e4 	bl	8004d48 <memchr>
 8004980:	2800      	cmp	r0, #0
 8004982:	d035      	beq.n	80049f0 <_svfiprintf_r+0x1c0>
 8004984:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <_svfiprintf_r+0x1e0>)
 8004986:	b9fb      	cbnz	r3, 80049c8 <_svfiprintf_r+0x198>
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	3307      	adds	r3, #7
 800498c:	f023 0307 	bic.w	r3, r3, #7
 8004990:	3308      	adds	r3, #8
 8004992:	9303      	str	r3, [sp, #12]
 8004994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004996:	444b      	add	r3, r9
 8004998:	9309      	str	r3, [sp, #36]	; 0x24
 800499a:	e76d      	b.n	8004878 <_svfiprintf_r+0x48>
 800499c:	fb00 3202 	mla	r2, r0, r2, r3
 80049a0:	2101      	movs	r1, #1
 80049a2:	e7a4      	b.n	80048ee <_svfiprintf_r+0xbe>
 80049a4:	2300      	movs	r3, #0
 80049a6:	240a      	movs	r4, #10
 80049a8:	4618      	mov	r0, r3
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	460f      	mov	r7, r1
 80049ae:	783a      	ldrb	r2, [r7, #0]
 80049b0:	3101      	adds	r1, #1
 80049b2:	3a30      	subs	r2, #48	; 0x30
 80049b4:	2a09      	cmp	r2, #9
 80049b6:	d903      	bls.n	80049c0 <_svfiprintf_r+0x190>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ca      	beq.n	8004952 <_svfiprintf_r+0x122>
 80049bc:	9005      	str	r0, [sp, #20]
 80049be:	e7c8      	b.n	8004952 <_svfiprintf_r+0x122>
 80049c0:	fb04 2000 	mla	r0, r4, r0, r2
 80049c4:	2301      	movs	r3, #1
 80049c6:	e7f1      	b.n	80049ac <_svfiprintf_r+0x17c>
 80049c8:	ab03      	add	r3, sp, #12
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	462a      	mov	r2, r5
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <_svfiprintf_r+0x1e4>)
 80049d0:	a904      	add	r1, sp, #16
 80049d2:	4640      	mov	r0, r8
 80049d4:	f3af 8000 	nop.w
 80049d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049dc:	4681      	mov	r9, r0
 80049de:	d1d9      	bne.n	8004994 <_svfiprintf_r+0x164>
 80049e0:	89ab      	ldrh	r3, [r5, #12]
 80049e2:	065b      	lsls	r3, r3, #25
 80049e4:	f53f af39 	bmi.w	800485a <_svfiprintf_r+0x2a>
 80049e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049ea:	b01d      	add	sp, #116	; 0x74
 80049ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f0:	ab03      	add	r3, sp, #12
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	462a      	mov	r2, r5
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <_svfiprintf_r+0x1e4>)
 80049f8:	a904      	add	r1, sp, #16
 80049fa:	4640      	mov	r0, r8
 80049fc:	f000 f884 	bl	8004b08 <_printf_i>
 8004a00:	e7ea      	b.n	80049d8 <_svfiprintf_r+0x1a8>
 8004a02:	bf00      	nop
 8004a04:	08007098 	.word	0x08007098
 8004a08:	0800709e 	.word	0x0800709e
 8004a0c:	080070a2 	.word	0x080070a2
 8004a10:	00000000 	.word	0x00000000
 8004a14:	08004779 	.word	0x08004779

08004a18 <_printf_common>:
 8004a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	4691      	mov	r9, r2
 8004a1e:	461f      	mov	r7, r3
 8004a20:	688a      	ldr	r2, [r1, #8]
 8004a22:	690b      	ldr	r3, [r1, #16]
 8004a24:	4606      	mov	r6, r0
 8004a26:	4293      	cmp	r3, r2
 8004a28:	bfb8      	it	lt
 8004a2a:	4613      	movlt	r3, r2
 8004a2c:	f8c9 3000 	str.w	r3, [r9]
 8004a30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a34:	460c      	mov	r4, r1
 8004a36:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a3a:	b112      	cbz	r2, 8004a42 <_printf_common+0x2a>
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	f8c9 3000 	str.w	r3, [r9]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	0699      	lsls	r1, r3, #26
 8004a46:	bf42      	ittt	mi
 8004a48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a4c:	3302      	addmi	r3, #2
 8004a4e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a52:	6825      	ldr	r5, [r4, #0]
 8004a54:	f015 0506 	ands.w	r5, r5, #6
 8004a58:	d107      	bne.n	8004a6a <_printf_common+0x52>
 8004a5a:	f104 0a19 	add.w	sl, r4, #25
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	f8d9 2000 	ldr.w	r2, [r9]
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	429d      	cmp	r5, r3
 8004a68:	db2a      	blt.n	8004ac0 <_printf_common+0xa8>
 8004a6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	3300      	adds	r3, #0
 8004a72:	bf18      	it	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	0692      	lsls	r2, r2, #26
 8004a78:	d42f      	bmi.n	8004ada <_printf_common+0xc2>
 8004a7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a7e:	4639      	mov	r1, r7
 8004a80:	4630      	mov	r0, r6
 8004a82:	47c0      	blx	r8
 8004a84:	3001      	adds	r0, #1
 8004a86:	d022      	beq.n	8004ace <_printf_common+0xb6>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	68e5      	ldr	r5, [r4, #12]
 8004a8c:	f003 0306 	and.w	r3, r3, #6
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	bf18      	it	ne
 8004a94:	2500      	movne	r5, #0
 8004a96:	f8d9 2000 	ldr.w	r2, [r9]
 8004a9a:	f04f 0900 	mov.w	r9, #0
 8004a9e:	bf08      	it	eq
 8004aa0:	1aad      	subeq	r5, r5, r2
 8004aa2:	68a3      	ldr	r3, [r4, #8]
 8004aa4:	6922      	ldr	r2, [r4, #16]
 8004aa6:	bf08      	it	eq
 8004aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bfc4      	itt	gt
 8004ab0:	1a9b      	subgt	r3, r3, r2
 8004ab2:	18ed      	addgt	r5, r5, r3
 8004ab4:	341a      	adds	r4, #26
 8004ab6:	454d      	cmp	r5, r9
 8004ab8:	d11b      	bne.n	8004af2 <_printf_common+0xda>
 8004aba:	2000      	movs	r0, #0
 8004abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	47c0      	blx	r8
 8004aca:	3001      	adds	r0, #1
 8004acc:	d103      	bne.n	8004ad6 <_printf_common+0xbe>
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad6:	3501      	adds	r5, #1
 8004ad8:	e7c1      	b.n	8004a5e <_printf_common+0x46>
 8004ada:	2030      	movs	r0, #48	; 0x30
 8004adc:	18e1      	adds	r1, r4, r3
 8004ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae8:	4422      	add	r2, r4
 8004aea:	3302      	adds	r3, #2
 8004aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af0:	e7c3      	b.n	8004a7a <_printf_common+0x62>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4622      	mov	r2, r4
 8004af6:	4639      	mov	r1, r7
 8004af8:	4630      	mov	r0, r6
 8004afa:	47c0      	blx	r8
 8004afc:	3001      	adds	r0, #1
 8004afe:	d0e6      	beq.n	8004ace <_printf_common+0xb6>
 8004b00:	f109 0901 	add.w	r9, r9, #1
 8004b04:	e7d7      	b.n	8004ab6 <_printf_common+0x9e>
	...

08004b08 <_printf_i>:
 8004b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b0c:	4617      	mov	r7, r2
 8004b0e:	7e0a      	ldrb	r2, [r1, #24]
 8004b10:	b085      	sub	sp, #20
 8004b12:	2a6e      	cmp	r2, #110	; 0x6e
 8004b14:	4698      	mov	r8, r3
 8004b16:	4606      	mov	r6, r0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b1c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004b20:	f000 80bc 	beq.w	8004c9c <_printf_i+0x194>
 8004b24:	d81a      	bhi.n	8004b5c <_printf_i+0x54>
 8004b26:	2a63      	cmp	r2, #99	; 0x63
 8004b28:	d02e      	beq.n	8004b88 <_printf_i+0x80>
 8004b2a:	d80a      	bhi.n	8004b42 <_printf_i+0x3a>
 8004b2c:	2a00      	cmp	r2, #0
 8004b2e:	f000 80c8 	beq.w	8004cc2 <_printf_i+0x1ba>
 8004b32:	2a58      	cmp	r2, #88	; 0x58
 8004b34:	f000 808a 	beq.w	8004c4c <_printf_i+0x144>
 8004b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b3c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004b40:	e02a      	b.n	8004b98 <_printf_i+0x90>
 8004b42:	2a64      	cmp	r2, #100	; 0x64
 8004b44:	d001      	beq.n	8004b4a <_printf_i+0x42>
 8004b46:	2a69      	cmp	r2, #105	; 0x69
 8004b48:	d1f6      	bne.n	8004b38 <_printf_i+0x30>
 8004b4a:	6821      	ldr	r1, [r4, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004b52:	d023      	beq.n	8004b9c <_printf_i+0x94>
 8004b54:	1d11      	adds	r1, r2, #4
 8004b56:	6019      	str	r1, [r3, #0]
 8004b58:	6813      	ldr	r3, [r2, #0]
 8004b5a:	e027      	b.n	8004bac <_printf_i+0xa4>
 8004b5c:	2a73      	cmp	r2, #115	; 0x73
 8004b5e:	f000 80b4 	beq.w	8004cca <_printf_i+0x1c2>
 8004b62:	d808      	bhi.n	8004b76 <_printf_i+0x6e>
 8004b64:	2a6f      	cmp	r2, #111	; 0x6f
 8004b66:	d02a      	beq.n	8004bbe <_printf_i+0xb6>
 8004b68:	2a70      	cmp	r2, #112	; 0x70
 8004b6a:	d1e5      	bne.n	8004b38 <_printf_i+0x30>
 8004b6c:	680a      	ldr	r2, [r1, #0]
 8004b6e:	f042 0220 	orr.w	r2, r2, #32
 8004b72:	600a      	str	r2, [r1, #0]
 8004b74:	e003      	b.n	8004b7e <_printf_i+0x76>
 8004b76:	2a75      	cmp	r2, #117	; 0x75
 8004b78:	d021      	beq.n	8004bbe <_printf_i+0xb6>
 8004b7a:	2a78      	cmp	r2, #120	; 0x78
 8004b7c:	d1dc      	bne.n	8004b38 <_printf_i+0x30>
 8004b7e:	2278      	movs	r2, #120	; 0x78
 8004b80:	496f      	ldr	r1, [pc, #444]	; (8004d40 <_printf_i+0x238>)
 8004b82:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004b86:	e064      	b.n	8004c52 <_printf_i+0x14a>
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004b8e:	1d11      	adds	r1, r2, #4
 8004b90:	6019      	str	r1, [r3, #0]
 8004b92:	6813      	ldr	r3, [r2, #0]
 8004b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0a3      	b.n	8004ce4 <_printf_i+0x1dc>
 8004b9c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ba0:	f102 0104 	add.w	r1, r2, #4
 8004ba4:	6019      	str	r1, [r3, #0]
 8004ba6:	d0d7      	beq.n	8004b58 <_printf_i+0x50>
 8004ba8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da03      	bge.n	8004bb8 <_printf_i+0xb0>
 8004bb0:	222d      	movs	r2, #45	; 0x2d
 8004bb2:	425b      	negs	r3, r3
 8004bb4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004bb8:	4962      	ldr	r1, [pc, #392]	; (8004d44 <_printf_i+0x23c>)
 8004bba:	220a      	movs	r2, #10
 8004bbc:	e017      	b.n	8004bee <_printf_i+0xe6>
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	6819      	ldr	r1, [r3, #0]
 8004bc2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004bc6:	d003      	beq.n	8004bd0 <_printf_i+0xc8>
 8004bc8:	1d08      	adds	r0, r1, #4
 8004bca:	6018      	str	r0, [r3, #0]
 8004bcc:	680b      	ldr	r3, [r1, #0]
 8004bce:	e006      	b.n	8004bde <_printf_i+0xd6>
 8004bd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bd4:	f101 0004 	add.w	r0, r1, #4
 8004bd8:	6018      	str	r0, [r3, #0]
 8004bda:	d0f7      	beq.n	8004bcc <_printf_i+0xc4>
 8004bdc:	880b      	ldrh	r3, [r1, #0]
 8004bde:	2a6f      	cmp	r2, #111	; 0x6f
 8004be0:	bf14      	ite	ne
 8004be2:	220a      	movne	r2, #10
 8004be4:	2208      	moveq	r2, #8
 8004be6:	4957      	ldr	r1, [pc, #348]	; (8004d44 <_printf_i+0x23c>)
 8004be8:	2000      	movs	r0, #0
 8004bea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004bee:	6865      	ldr	r5, [r4, #4]
 8004bf0:	2d00      	cmp	r5, #0
 8004bf2:	60a5      	str	r5, [r4, #8]
 8004bf4:	f2c0 809c 	blt.w	8004d30 <_printf_i+0x228>
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	f020 0004 	bic.w	r0, r0, #4
 8004bfe:	6020      	str	r0, [r4, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d13f      	bne.n	8004c84 <_printf_i+0x17c>
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	f040 8095 	bne.w	8004d34 <_printf_i+0x22c>
 8004c0a:	4675      	mov	r5, lr
 8004c0c:	2a08      	cmp	r2, #8
 8004c0e:	d10b      	bne.n	8004c28 <_printf_i+0x120>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	07da      	lsls	r2, r3, #31
 8004c14:	d508      	bpl.n	8004c28 <_printf_i+0x120>
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	6862      	ldr	r2, [r4, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	bfde      	ittt	le
 8004c1e:	2330      	movle	r3, #48	; 0x30
 8004c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c28:	ebae 0305 	sub.w	r3, lr, r5
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	f8cd 8000 	str.w	r8, [sp]
 8004c32:	463b      	mov	r3, r7
 8004c34:	aa03      	add	r2, sp, #12
 8004c36:	4621      	mov	r1, r4
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f7ff feed 	bl	8004a18 <_printf_common>
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d155      	bne.n	8004cee <_printf_i+0x1e6>
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	b005      	add	sp, #20
 8004c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c4c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004c50:	493c      	ldr	r1, [pc, #240]	; (8004d44 <_printf_i+0x23c>)
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004c5a:	f100 0504 	add.w	r5, r0, #4
 8004c5e:	601d      	str	r5, [r3, #0]
 8004c60:	d001      	beq.n	8004c66 <_printf_i+0x15e>
 8004c62:	6803      	ldr	r3, [r0, #0]
 8004c64:	e002      	b.n	8004c6c <_printf_i+0x164>
 8004c66:	0655      	lsls	r5, r2, #25
 8004c68:	d5fb      	bpl.n	8004c62 <_printf_i+0x15a>
 8004c6a:	8803      	ldrh	r3, [r0, #0]
 8004c6c:	07d0      	lsls	r0, r2, #31
 8004c6e:	bf44      	itt	mi
 8004c70:	f042 0220 	orrmi.w	r2, r2, #32
 8004c74:	6022      	strmi	r2, [r4, #0]
 8004c76:	b91b      	cbnz	r3, 8004c80 <_printf_i+0x178>
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	f022 0220 	bic.w	r2, r2, #32
 8004c7e:	6022      	str	r2, [r4, #0]
 8004c80:	2210      	movs	r2, #16
 8004c82:	e7b1      	b.n	8004be8 <_printf_i+0xe0>
 8004c84:	4675      	mov	r5, lr
 8004c86:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c8a:	fb02 3310 	mls	r3, r2, r0, r3
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c94:	4603      	mov	r3, r0
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d1f5      	bne.n	8004c86 <_printf_i+0x17e>
 8004c9a:	e7b7      	b.n	8004c0c <_printf_i+0x104>
 8004c9c:	6808      	ldr	r0, [r1, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004ca4:	6949      	ldr	r1, [r1, #20]
 8004ca6:	d004      	beq.n	8004cb2 <_printf_i+0x1aa>
 8004ca8:	1d10      	adds	r0, r2, #4
 8004caa:	6018      	str	r0, [r3, #0]
 8004cac:	6813      	ldr	r3, [r2, #0]
 8004cae:	6019      	str	r1, [r3, #0]
 8004cb0:	e007      	b.n	8004cc2 <_printf_i+0x1ba>
 8004cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cb6:	f102 0004 	add.w	r0, r2, #4
 8004cba:	6018      	str	r0, [r3, #0]
 8004cbc:	6813      	ldr	r3, [r2, #0]
 8004cbe:	d0f6      	beq.n	8004cae <_printf_i+0x1a6>
 8004cc0:	8019      	strh	r1, [r3, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4675      	mov	r5, lr
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	e7b1      	b.n	8004c2e <_printf_i+0x126>
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	1d11      	adds	r1, r2, #4
 8004cce:	6019      	str	r1, [r3, #0]
 8004cd0:	6815      	ldr	r5, [r2, #0]
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6862      	ldr	r2, [r4, #4]
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f836 	bl	8004d48 <memchr>
 8004cdc:	b108      	cbz	r0, 8004ce2 <_printf_i+0x1da>
 8004cde:	1b40      	subs	r0, r0, r5
 8004ce0:	6060      	str	r0, [r4, #4]
 8004ce2:	6863      	ldr	r3, [r4, #4]
 8004ce4:	6123      	str	r3, [r4, #16]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cec:	e79f      	b.n	8004c2e <_printf_i+0x126>
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4639      	mov	r1, r7
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	47c0      	blx	r8
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d0a2      	beq.n	8004c42 <_printf_i+0x13a>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	079b      	lsls	r3, r3, #30
 8004d00:	d507      	bpl.n	8004d12 <_printf_i+0x20a>
 8004d02:	2500      	movs	r5, #0
 8004d04:	f104 0919 	add.w	r9, r4, #25
 8004d08:	68e3      	ldr	r3, [r4, #12]
 8004d0a:	9a03      	ldr	r2, [sp, #12]
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	429d      	cmp	r5, r3
 8004d10:	db05      	blt.n	8004d1e <_printf_i+0x216>
 8004d12:	68e0      	ldr	r0, [r4, #12]
 8004d14:	9b03      	ldr	r3, [sp, #12]
 8004d16:	4298      	cmp	r0, r3
 8004d18:	bfb8      	it	lt
 8004d1a:	4618      	movlt	r0, r3
 8004d1c:	e793      	b.n	8004c46 <_printf_i+0x13e>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	464a      	mov	r2, r9
 8004d22:	4639      	mov	r1, r7
 8004d24:	4630      	mov	r0, r6
 8004d26:	47c0      	blx	r8
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d08a      	beq.n	8004c42 <_printf_i+0x13a>
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	e7eb      	b.n	8004d08 <_printf_i+0x200>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1a7      	bne.n	8004c84 <_printf_i+0x17c>
 8004d34:	780b      	ldrb	r3, [r1, #0]
 8004d36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d3e:	e765      	b.n	8004c0c <_printf_i+0x104>
 8004d40:	080070ba 	.word	0x080070ba
 8004d44:	080070a9 	.word	0x080070a9

08004d48 <memchr>:
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	b2c9      	uxtb	r1, r1
 8004d4c:	4402      	add	r2, r0
 8004d4e:	4290      	cmp	r0, r2
 8004d50:	4603      	mov	r3, r0
 8004d52:	d101      	bne.n	8004d58 <memchr+0x10>
 8004d54:	2000      	movs	r0, #0
 8004d56:	bd10      	pop	{r4, pc}
 8004d58:	781c      	ldrb	r4, [r3, #0]
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	428c      	cmp	r4, r1
 8004d5e:	d1f6      	bne.n	8004d4e <memchr+0x6>
 8004d60:	4618      	mov	r0, r3
 8004d62:	bd10      	pop	{r4, pc}

08004d64 <memcpy>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	1e43      	subs	r3, r0, #1
 8004d68:	440a      	add	r2, r1
 8004d6a:	4291      	cmp	r1, r2
 8004d6c:	d100      	bne.n	8004d70 <memcpy+0xc>
 8004d6e:	bd10      	pop	{r4, pc}
 8004d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d78:	e7f7      	b.n	8004d6a <memcpy+0x6>

08004d7a <memmove>:
 8004d7a:	4288      	cmp	r0, r1
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	eb01 0302 	add.w	r3, r1, r2
 8004d82:	d803      	bhi.n	8004d8c <memmove+0x12>
 8004d84:	1e42      	subs	r2, r0, #1
 8004d86:	4299      	cmp	r1, r3
 8004d88:	d10c      	bne.n	8004da4 <memmove+0x2a>
 8004d8a:	bd10      	pop	{r4, pc}
 8004d8c:	4298      	cmp	r0, r3
 8004d8e:	d2f9      	bcs.n	8004d84 <memmove+0xa>
 8004d90:	1881      	adds	r1, r0, r2
 8004d92:	1ad2      	subs	r2, r2, r3
 8004d94:	42d3      	cmn	r3, r2
 8004d96:	d100      	bne.n	8004d9a <memmove+0x20>
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004da2:	e7f7      	b.n	8004d94 <memmove+0x1a>
 8004da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004dac:	e7eb      	b.n	8004d86 <memmove+0xc>
	...

08004db0 <_free_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4605      	mov	r5, r0
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d043      	beq.n	8004e40 <_free_r+0x90>
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f0c      	subs	r4, r1, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	18e4      	addlt	r4, r4, r3
 8004dc4:	f000 f8d4 	bl	8004f70 <__malloc_lock>
 8004dc8:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <_free_r+0x94>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	4610      	mov	r0, r2
 8004dce:	b933      	cbnz	r3, 8004dde <_free_r+0x2e>
 8004dd0:	6063      	str	r3, [r4, #4]
 8004dd2:	6014      	str	r4, [r2, #0]
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dda:	f000 b8ca 	b.w	8004f72 <__malloc_unlock>
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	d90b      	bls.n	8004dfa <_free_r+0x4a>
 8004de2:	6821      	ldr	r1, [r4, #0]
 8004de4:	1862      	adds	r2, r4, r1
 8004de6:	4293      	cmp	r3, r2
 8004de8:	bf01      	itttt	eq
 8004dea:	681a      	ldreq	r2, [r3, #0]
 8004dec:	685b      	ldreq	r3, [r3, #4]
 8004dee:	1852      	addeq	r2, r2, r1
 8004df0:	6022      	streq	r2, [r4, #0]
 8004df2:	6063      	str	r3, [r4, #4]
 8004df4:	6004      	str	r4, [r0, #0]
 8004df6:	e7ed      	b.n	8004dd4 <_free_r+0x24>
 8004df8:	4613      	mov	r3, r2
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	b10a      	cbz	r2, 8004e02 <_free_r+0x52>
 8004dfe:	42a2      	cmp	r2, r4
 8004e00:	d9fa      	bls.n	8004df8 <_free_r+0x48>
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	1858      	adds	r0, r3, r1
 8004e06:	42a0      	cmp	r0, r4
 8004e08:	d10b      	bne.n	8004e22 <_free_r+0x72>
 8004e0a:	6820      	ldr	r0, [r4, #0]
 8004e0c:	4401      	add	r1, r0
 8004e0e:	1858      	adds	r0, r3, r1
 8004e10:	4282      	cmp	r2, r0
 8004e12:	6019      	str	r1, [r3, #0]
 8004e14:	d1de      	bne.n	8004dd4 <_free_r+0x24>
 8004e16:	6810      	ldr	r0, [r2, #0]
 8004e18:	6852      	ldr	r2, [r2, #4]
 8004e1a:	4401      	add	r1, r0
 8004e1c:	6019      	str	r1, [r3, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	e7d8      	b.n	8004dd4 <_free_r+0x24>
 8004e22:	d902      	bls.n	8004e2a <_free_r+0x7a>
 8004e24:	230c      	movs	r3, #12
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	e7d4      	b.n	8004dd4 <_free_r+0x24>
 8004e2a:	6820      	ldr	r0, [r4, #0]
 8004e2c:	1821      	adds	r1, r4, r0
 8004e2e:	428a      	cmp	r2, r1
 8004e30:	bf01      	itttt	eq
 8004e32:	6811      	ldreq	r1, [r2, #0]
 8004e34:	6852      	ldreq	r2, [r2, #4]
 8004e36:	1809      	addeq	r1, r1, r0
 8004e38:	6021      	streq	r1, [r4, #0]
 8004e3a:	6062      	str	r2, [r4, #4]
 8004e3c:	605c      	str	r4, [r3, #4]
 8004e3e:	e7c9      	b.n	8004dd4 <_free_r+0x24>
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	200004b0 	.word	0x200004b0

08004e48 <_malloc_r>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	1ccd      	adds	r5, r1, #3
 8004e4c:	f025 0503 	bic.w	r5, r5, #3
 8004e50:	3508      	adds	r5, #8
 8004e52:	2d0c      	cmp	r5, #12
 8004e54:	bf38      	it	cc
 8004e56:	250c      	movcc	r5, #12
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	db01      	blt.n	8004e62 <_malloc_r+0x1a>
 8004e5e:	42a9      	cmp	r1, r5
 8004e60:	d903      	bls.n	8004e6a <_malloc_r+0x22>
 8004e62:	230c      	movs	r3, #12
 8004e64:	6033      	str	r3, [r6, #0]
 8004e66:	2000      	movs	r0, #0
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
 8004e6a:	f000 f881 	bl	8004f70 <__malloc_lock>
 8004e6e:	4a23      	ldr	r2, [pc, #140]	; (8004efc <_malloc_r+0xb4>)
 8004e70:	6814      	ldr	r4, [r2, #0]
 8004e72:	4621      	mov	r1, r4
 8004e74:	b991      	cbnz	r1, 8004e9c <_malloc_r+0x54>
 8004e76:	4c22      	ldr	r4, [pc, #136]	; (8004f00 <_malloc_r+0xb8>)
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	b91b      	cbnz	r3, 8004e84 <_malloc_r+0x3c>
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 f867 	bl	8004f50 <_sbrk_r>
 8004e82:	6020      	str	r0, [r4, #0]
 8004e84:	4629      	mov	r1, r5
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 f862 	bl	8004f50 <_sbrk_r>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d126      	bne.n	8004ede <_malloc_r+0x96>
 8004e90:	230c      	movs	r3, #12
 8004e92:	4630      	mov	r0, r6
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	f000 f86c 	bl	8004f72 <__malloc_unlock>
 8004e9a:	e7e4      	b.n	8004e66 <_malloc_r+0x1e>
 8004e9c:	680b      	ldr	r3, [r1, #0]
 8004e9e:	1b5b      	subs	r3, r3, r5
 8004ea0:	d41a      	bmi.n	8004ed8 <_malloc_r+0x90>
 8004ea2:	2b0b      	cmp	r3, #11
 8004ea4:	d90f      	bls.n	8004ec6 <_malloc_r+0x7e>
 8004ea6:	600b      	str	r3, [r1, #0]
 8004ea8:	18cc      	adds	r4, r1, r3
 8004eaa:	50cd      	str	r5, [r1, r3]
 8004eac:	4630      	mov	r0, r6
 8004eae:	f000 f860 	bl	8004f72 <__malloc_unlock>
 8004eb2:	f104 000b 	add.w	r0, r4, #11
 8004eb6:	1d23      	adds	r3, r4, #4
 8004eb8:	f020 0007 	bic.w	r0, r0, #7
 8004ebc:	1ac3      	subs	r3, r0, r3
 8004ebe:	d01b      	beq.n	8004ef8 <_malloc_r+0xb0>
 8004ec0:	425a      	negs	r2, r3
 8004ec2:	50e2      	str	r2, [r4, r3]
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
 8004ec6:	428c      	cmp	r4, r1
 8004ec8:	bf0b      	itete	eq
 8004eca:	6863      	ldreq	r3, [r4, #4]
 8004ecc:	684b      	ldrne	r3, [r1, #4]
 8004ece:	6013      	streq	r3, [r2, #0]
 8004ed0:	6063      	strne	r3, [r4, #4]
 8004ed2:	bf18      	it	ne
 8004ed4:	460c      	movne	r4, r1
 8004ed6:	e7e9      	b.n	8004eac <_malloc_r+0x64>
 8004ed8:	460c      	mov	r4, r1
 8004eda:	6849      	ldr	r1, [r1, #4]
 8004edc:	e7ca      	b.n	8004e74 <_malloc_r+0x2c>
 8004ede:	1cc4      	adds	r4, r0, #3
 8004ee0:	f024 0403 	bic.w	r4, r4, #3
 8004ee4:	42a0      	cmp	r0, r4
 8004ee6:	d005      	beq.n	8004ef4 <_malloc_r+0xac>
 8004ee8:	1a21      	subs	r1, r4, r0
 8004eea:	4630      	mov	r0, r6
 8004eec:	f000 f830 	bl	8004f50 <_sbrk_r>
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d0cd      	beq.n	8004e90 <_malloc_r+0x48>
 8004ef4:	6025      	str	r5, [r4, #0]
 8004ef6:	e7d9      	b.n	8004eac <_malloc_r+0x64>
 8004ef8:	bd70      	pop	{r4, r5, r6, pc}
 8004efa:	bf00      	nop
 8004efc:	200004b0 	.word	0x200004b0
 8004f00:	200004b4 	.word	0x200004b4

08004f04 <_realloc_r>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	4607      	mov	r7, r0
 8004f08:	4614      	mov	r4, r2
 8004f0a:	460e      	mov	r6, r1
 8004f0c:	b921      	cbnz	r1, 8004f18 <_realloc_r+0x14>
 8004f0e:	4611      	mov	r1, r2
 8004f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f14:	f7ff bf98 	b.w	8004e48 <_malloc_r>
 8004f18:	b922      	cbnz	r2, 8004f24 <_realloc_r+0x20>
 8004f1a:	f7ff ff49 	bl	8004db0 <_free_r>
 8004f1e:	4625      	mov	r5, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f24:	f000 f826 	bl	8004f74 <_malloc_usable_size_r>
 8004f28:	4284      	cmp	r4, r0
 8004f2a:	d90f      	bls.n	8004f4c <_realloc_r+0x48>
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	4638      	mov	r0, r7
 8004f30:	f7ff ff8a 	bl	8004e48 <_malloc_r>
 8004f34:	4605      	mov	r5, r0
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d0f2      	beq.n	8004f20 <_realloc_r+0x1c>
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	f7ff ff11 	bl	8004d64 <memcpy>
 8004f42:	4631      	mov	r1, r6
 8004f44:	4638      	mov	r0, r7
 8004f46:	f7ff ff33 	bl	8004db0 <_free_r>
 8004f4a:	e7e9      	b.n	8004f20 <_realloc_r+0x1c>
 8004f4c:	4635      	mov	r5, r6
 8004f4e:	e7e7      	b.n	8004f20 <_realloc_r+0x1c>

08004f50 <_sbrk_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	2300      	movs	r3, #0
 8004f54:	4c05      	ldr	r4, [pc, #20]	; (8004f6c <_sbrk_r+0x1c>)
 8004f56:	4605      	mov	r5, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	f7fc f9fa 	bl	8001354 <_sbrk>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_sbrk_r+0x1a>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_sbrk_r+0x1a>
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	200005f8 	.word	0x200005f8

08004f70 <__malloc_lock>:
 8004f70:	4770      	bx	lr

08004f72 <__malloc_unlock>:
 8004f72:	4770      	bx	lr

08004f74 <_malloc_usable_size_r>:
 8004f74:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f1a0 0004 	sub.w	r0, r0, #4
 8004f7e:	bfbc      	itt	lt
 8004f80:	580b      	ldrlt	r3, [r1, r0]
 8004f82:	18c0      	addlt	r0, r0, r3
 8004f84:	4770      	bx	lr
	...

08004f88 <_init>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr

08004f94 <_fini>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr
